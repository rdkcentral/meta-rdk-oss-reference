Index: net-snmp-5.9.1/agent/snmp_agent.c
===================================================================
--- net-snmp-5.9.1.orig/agent/snmp_agent.c
+++ net-snmp-5.9.1/agent/snmp_agent.c
@@ -1615,6 +1615,11 @@ free_agent_snmp_session(netsnmp_agent_se
     DEBUGMSGTL(("verbose:asp", "asp %p reqinfo %p freed\n",
                 asp, asp->reqinfo));
 
+    /* Clean up securityStateRef here to prevent a double free */
+    if (asp->orig_pdu && asp->orig_pdu->securityStateRef)
+	snmp_free_securityStateRef(asp->orig_pdu);
+    if (asp->pdu && asp->pdu->securityStateRef)
+	snmp_free_securityStateRef(asp->pdu);
     if (asp->orig_pdu)
         snmp_free_pdu(asp->orig_pdu);
     if (asp->pdu)
Index: net-snmp-5.9.1/include/net-snmp/pdu_api.h
===================================================================
--- net-snmp-5.9.1.orig/include/net-snmp/pdu_api.h
+++ net-snmp-5.9.1/include/net-snmp/pdu_api.h
@@ -19,6 +19,8 @@ NETSNMP_IMPORT
 netsnmp_pdu    *snmp_fix_pdu(  netsnmp_pdu *pdu, int idx);
 NETSNMP_IMPORT
 void            snmp_free_pdu( netsnmp_pdu *pdu);
+NETSNMP_IMPORT
+void            snmp_free_securityStateRef( netsnmp_pdu *pdu);
 
 #ifdef __cplusplus
 }
Index: net-snmp-5.9.1/snmplib/snmp_api.c
===================================================================
--- net-snmp-5.9.1.orig/snmplib/snmp_api.c
+++ net-snmp-5.9.1/snmplib/snmp_api.c
@@ -784,7 +784,7 @@ snmp_sess_init(netsnmp_session * session
     session->retries = SNMP_DEFAULT_RETRIES;
     session->version = SNMP_DEFAULT_VERSION;
     session->securityModel = SNMP_DEFAULT_SECMODEL;
-    session->rcvMsgMaxSize = netsnmp_max_send_msg_size();
+    session->rcvMsgMaxSize = netsnmp_max_send_msg_size(); /* To accept packets more than 1472 when the MTU is higher than 1500*/
     session->sndMsgMaxSize = netsnmp_max_send_msg_size();
     session->flags |= SNMP_FLAGS_DONT_PROBE;
 }
@@ -4045,7 +4045,7 @@ snmpv3_parse(netsnmp_pdu *pdu,
     return SNMPERR_SUCCESS;
 }                               /* end snmpv3_parse() */
 
-static void
+void
 free_securityStateRef(netsnmp_pdu* pdu)
 {
     struct snmp_secmod_def *sptr;
@@ -4070,6 +4070,17 @@ free_securityStateRef(netsnmp_pdu* pdu)
     pdu->securityStateRef = NULL;
 }
 
+/*
+ * This function is here to provide a separate call to
+ * free the securityStateRef memory. This is needed to prevent
+ * a double free if this memory is freed in snmp_free_pdu.
+ */
+void
+snmp_free_securityStateRef(netsnmp_pdu* pdu)
+{
+    free_securityStateRef(pdu);
+}
+
 #define ERROR_STAT_LENGTH 11
 
 int
Index: net-snmp-5.9.1/snmplib/snmpusm.c
===================================================================
--- net-snmp-5.9.1.orig/snmplib/snmpusm.c
+++ net-snmp-5.9.1/snmplib/snmpusm.c
@@ -320,10 +320,15 @@ usm_free_usmStateReference(void *old)
     if (--ref->refcnt > 0)
         return;
 
-    SNMP_FREE(ref->usr_name);
-    SNMP_FREE(ref->usr_engine_id);
-    SNMP_FREE(ref->usr_auth_protocol);
-    SNMP_FREE(ref->usr_priv_protocol);
+    if (ref->usr_name_length)
+	SNMP_FREE(ref->usr_name);
+    if (ref->usr_engine_id_length)
+	SNMP_FREE(ref->usr_engine_id);
+    if (ref->usr_auth_protocol_length)
+	SNMP_FREE(ref->usr_auth_protocol);
+    if (ref->usr_auth_protocol_length)
+	SNMP_FREE(ref->usr_priv_protocol);
+
 
     if (ref->usr_auth_key_length && ref->usr_auth_key) {
         SNMP_ZERO(ref->usr_auth_key, ref->usr_auth_key_length);

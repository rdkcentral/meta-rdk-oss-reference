Date: Aug 27, 2020
From: Deva <Deva_Thiyagarajan2@comcast.com>
Source: COMCAST
Subject: Add extraction hooks in opkg code to support Comcast packager. 
Hooks will extract the two levels of compression done during build time to get the final ipk
Signed-off-by: Deva <Deva_Thiyagarajan2@comcast.com>
Index: opkg-0.5.0/libopkg/opkg_archive.c
===================================================================
--- opkg-0.5.0.orig/libopkg/opkg_archive.c
+++ opkg-0.5.0/libopkg/opkg_archive.c
@@ -951,6 +951,44 @@ struct opkg_ar *ar_open_compressed_file(
     return NULL;
 }
 
+#ifdef HAVE_RDM
+int ar_extract_rdm_all(char *filename, char *dir)
+{
+    struct archive *ar;
+    int r;
+
+    ar = archive_read_new();
+    if (!ar) {
+        opkg_msg(ERROR, "Failed to create archive object.\n");
+        goto err_cleanup;
+    }
+
+    r = archive_read_support_format_tar(ar);
+    if (r != ARCHIVE_OK) {
+        opkg_msg(ERROR, "Tar format not supported: %s\n");
+        goto err_cleanup;
+    }
+
+    r = archive_read_open_filename(ar, filename, EXTRACT_BUFFER_LEN);
+    if (r != ARCHIVE_OK) {
+        opkg_msg(ERROR, "Failed to open package '%s'\n", filename);
+        goto err_cleanup;
+    }
+
+    int extract_flags = ARCHIVE_EXTRACT_OWNER | ARCHIVE_EXTRACT_PERM |
+        ARCHIVE_EXTRACT_TIME | ARCHIVE_EXTRACT_UNLINK;
+
+    if (opkg_config->ignore_uid)
+        extract_flags &= ~ARCHIVE_EXTRACT_OWNER;
+
+    r = extract_all(ar, dir, extract_flags);
+
+ err_cleanup:
+    archive_read_free(ar);
+    return r;
+}
+#endif
+
 int ar_copy_to_stream(struct opkg_ar *ar, FILE * stream)
 {
     return copy_to_stream(ar->ar, stream);
Index: opkg-0.5.0/libopkg/opkg_archive.h
===================================================================
--- opkg-0.5.0.orig/libopkg/opkg_archive.h
+++ opkg-0.5.0/libopkg/opkg_archive.h
@@ -28,6 +28,10 @@ struct opkg_ar {
     int extract_flags;
 };
 
+#ifdef HAVE_RDM
+int ar_extract_rdm_all(char *filename, char *dir);
+#endif
+
 struct opkg_ar *ar_open_pkg_control_archive(const char *filename);
 struct opkg_ar *ar_open_pkg_data_archive(const char *filename);
 struct opkg_ar *ar_open_compressed_file(const char *filename);
Index: opkg-0.5.0/libopkg/pkg.c
===================================================================
--- opkg-0.5.0.orig/libopkg/pkg.c
+++ opkg-0.5.0/libopkg/pkg.c
@@ -261,6 +261,47 @@ void pkg_deinit(pkg_t * pkg)
     pkg->tags = NULL;
 }
 
+#ifdef HAVE_RDM
+static int container_ipk_present = 0;
+
+char* pkg_rdm_read_packages_list(char *rdm_app_dwld_dir)
+{
+    char *rdm_packages_list = NULL;
+    char *app_pkg_ipk_name = NULL;
+
+    sprintf_alloc(&rdm_packages_list, "%s/packages.list", rdm_app_dwld_dir);
+
+    FILE *fp = fopen(rdm_packages_list, "r");
+    if(fp == NULL) {
+        free(rdm_packages_list);
+        return NULL;
+    }
+
+    char *line = NULL;
+    size_t len = 0;
+    int files = 0;
+
+    while(getline(&line, &len, fp) != -1 && files++ < 2) {
+        if ((0 == container_ipk_present) && (NULL != strstr(line, "container.ipk")))
+        {
+            container_ipk_present = 1;
+        }
+        else if(len > 0)
+        {
+            app_pkg_ipk_name = xcalloc(strlen(line), sizeof(char));
+            //strlen - 1 because we dont need newline
+            strncpy(app_pkg_ipk_name, line, strlen(line)-1);
+        }
+    }
+
+    fclose(fp);
+    free(line);
+    free(rdm_packages_list);
+
+    return app_pkg_ipk_name;
+}
+#endif
+
 int pkg_init_from_file(pkg_t * pkg, const char *filename)
 {
     int fd, err = 0;
@@ -271,7 +312,83 @@ int pkg_init_from_file(pkg_t * pkg, cons
 
     pkg->local_filename = xstrdup(filename);
 
+#ifdef HAVE_RDM
+    /* RDM packages have two levels of compression. First extract the outer archive that
+       contains pkg.sig, pkg.tar & padding file. Then extract inner pkg.tar that contains the ipk.
+       Files are extracted to respective app download dir set by packager plugin
+    */
+    char *rdm_cache_dir = xdirname(pkg->local_filename);
+    FILE *LOG = fopen("/opt/logs/rdm_status.log", "a+");
+
+    fprintf(LOG, "pkg_init_from_file: Extracting RDM package %s\n", pkg->local_filename);
+    err = pkg_extract_rdm_files_to_dir(pkg->local_filename, rdm_cache_dir, "outer");
+    if (err) {
+        opkg_msg(NOTICE, "Failed to extract RDM package %s\n", pkg->local_filename);
+        fprintf(LOG, "pkg_init_from_file: Failed to extract RDM package %s\n", pkg->local_filename);
+        system("touch /tmp/.opkg_rdm_extract_failed");
+        unlink(pkg->local_filename);
+        free(rdm_cache_dir);
+        fclose(LOG);
+        return err;
+    }
+
+    fprintf(LOG, "pkg_init_from_file: Extracting RDM pkg.tar\n");
+    err = pkg_extract_rdm_files_to_dir(pkg->local_filename, rdm_cache_dir, "inner");
+    if (err) {
+        opkg_msg(NOTICE, "Failed to extract RDM pkg.tar\n");
+        fprintf(LOG, "pkg_init_from_file: Failed to extract RDM pkg.tar\n");
+        system("touch /tmp/.opkg_rdm_extract_failed");
+        free(rdm_cache_dir);
+        fclose(LOG);
+        return err;
+    }
+
+    /* Now comes the actual ipk extraction. If rdm package contains container.ipk then
+       that is extracted first before we give the control to opkg to extract the package ipk.
+       packages.list - Contains the list of ipk files present in rdm package
+
+       NOTE - We expect only two kinds of ipk files. One for package itself & the other one
+       for container (optional)
+       TODO - Scale the logic to handle multiple ipk files from same rdm package
+    */
+    char *rdm_pkg_ipk = pkg_rdm_read_packages_list(rdm_cache_dir);
+    if (NULL == rdm_pkg_ipk) {
+        fprintf(LOG, "pkg_init_from_file: Reading packages.list file failed\n");
+        system("touch /tmp/.opkg_rdm_extract_failed");
+        free(rdm_cache_dir);
+        fclose(LOG); 
+        return -1;
+    }
+
+    if(1 == container_ipk_present)
+    {
+        fprintf(LOG, "pkg_init_from_file: Extracting RDM container package\n");
+        err = pkg_extract_rdm_files_to_dir(pkg->local_filename, opkg_config->cache_dir, "container");
+        if (err) {
+            opkg_msg(NOTICE, "Failed to extract rdm container package\n");
+            fprintf(LOG, "pkg_init_from_file: Failed to extract RDM container package\n");
+            system("touch /tmp/.opkg_rdm_extract_failed");
+            free(rdm_pkg_ipk);
+            free(rdm_cache_dir);
+            fclose(LOG);
+            return err;
+        }
+        container_ipk_present = 0;
+    }
+
+    free(pkg->local_filename);
+    sprintf_alloc(&pkg->local_filename, "%s/%s", rdm_cache_dir, rdm_pkg_ipk);
+    free(rdm_pkg_ipk);
+    free(rdm_cache_dir);
+
+    fprintf(LOG, "pkg_init_from_file: Extracting package ipk %s\n", pkg->local_filename);
+    fclose(LOG);
+
+    tmp = xstrdup(pkg->local_filename);
+#else   
     tmp = xstrdup(filename);
+#endif
+
     sprintf_alloc(&control_path, "%s/%s.control.XXXXXX", opkg_config->tmp_dir,
                   basename(tmp));
     free(tmp);
Index: opkg-0.5.0/libopkg/pkg_extract.c
===================================================================
--- opkg-0.5.0.orig/libopkg/pkg_extract.c
+++ opkg-0.5.0/libopkg/pkg_extract.c
@@ -83,6 +83,79 @@ int pkg_extract_control_files_to_dir(pkg
     return pkg_extract_control_files_to_dir_with_prefix(pkg, dir, "");
 }
 
+#ifdef HAVE_RDM
+int pkg_extract_rdm_data_files_to_dir(char *filename, char *dir)
+{
+    int r;
+    struct opkg_ar *ar;
+
+    ar = ar_open_pkg_data_archive(filename);
+    if (!ar) {
+        opkg_msg(ERROR, "Failed to extract data.tar.gz from package '%s'.\n",
+                 filename);
+        return -1;
+    }
+
+    r = ar_extract_all(ar, dir);
+    if (r < 0)
+        opkg_msg(ERROR, "Failed to extract data files from package '%s'.\n",
+                 filename);
+
+    ar_close(ar);
+    return r;
+}
+
+int pkg_extract_rdm_files_to_dir(char *filename, char *dir, const char *pkg_type)
+{
+    char *dir_with_prefix;
+    int r;
+    FILE *LOG = fopen("/opt/logs/rdm_status.log", "a+");
+
+    //signed.tar
+    if (0 == strncmp(pkg_type, "outer", 5))
+    {
+        sprintf_alloc(&dir_with_prefix, "%s/", dir);
+        fprintf(LOG, "pkg_extract_rdm_files_to_dir: Extracting %s to %s\n", filename, dir_with_prefix);
+        r = ar_extract_rdm_all(filename, dir_with_prefix);
+    }
+
+    //<app>-pkg.tar
+    if (0 == strncmp(pkg_type, "inner", 5))
+    {
+        char *rdm_appname = basename(dir);
+        char *rdm_app_tar;
+        sprintf_alloc(&rdm_app_tar, "%s/%s-pkg.tar", dir, rdm_appname);
+        sprintf_alloc(&dir_with_prefix, "%s/", dir);
+        fprintf(LOG, "pkg_extract_rdm_files_to_dir: Extracting %s to %s\n", rdm_app_tar, dir_with_prefix);
+        r = ar_extract_rdm_all(rdm_app_tar, dir_with_prefix);
+        free(rdm_app_tar);
+    }
+
+    //<app>_container.ipk
+    if (0 == strncmp(pkg_type, "container", 9))
+    {
+        char *rdm_app_dwld_dir = xdirname(filename);
+        char *rdm_appname = basename(rdm_app_dwld_dir);
+        char *rdm_app_container_ipk;
+
+        sprintf_alloc(&dir_with_prefix, "%s/%s/", dir, rdm_appname);
+        sprintf_alloc(&rdm_app_container_ipk, "%s/%s_container.ipk", rdm_app_dwld_dir, rdm_appname);
+
+        fprintf(LOG, "pkg_extract_rdm_files_to_dir: Extracting %s to %s\n", rdm_app_container_ipk, dir_with_prefix);
+        r = pkg_extract_rdm_data_files_to_dir(rdm_app_container_ipk, dir_with_prefix);
+        free(rdm_app_dwld_dir);
+        free(rdm_app_container_ipk);
+    }
+
+    free(dir_with_prefix);
+    fclose(LOG);
+    if (r < 0)
+        opkg_msg(ERROR, "Failed to extract files from rdm package\n");
+
+    return r;
+}
+#endif
+
 int pkg_extract_data_files_to_dir(pkg_t * pkg, const char *dir)
 {
     int r;
Index: opkg-0.5.0/libopkg/pkg_extract.h
===================================================================
--- opkg-0.5.0.orig/libopkg/pkg_extract.h
+++ opkg-0.5.0/libopkg/pkg_extract.h
@@ -27,6 +27,10 @@
 extern "C" {
 #endif
 
+#ifdef HAVE_RDM
+int pkg_extract_rdm_files_to_dir(char *filename, char *dir, const char *pkg_type);
+#endif
+
 int pkg_extract_control_file_to_stream(pkg_t * pkg, FILE * stream);
 int pkg_extract_control_files_to_dir(pkg_t * pkg, const char *dir);
 int pkg_extract_control_files_to_dir_with_prefix(pkg_t * pkg,
Index: opkg-0.5.0/libopkg/opkg_conf.h
===================================================================
--- opkg-0.5.0.orig/libopkg/opkg_conf.h
+++ opkg-0.5.0/libopkg/opkg_conf.h
@@ -46,8 +46,12 @@ extern "C" {
 
 /* In case the config file defines no dest */
 #define OPKG_CONF_DEFAULT_DEST_NAME "root"
+#ifdef HAVE_RDM
+#define OPKG_CONF_DEFAULT_DEST_ROOT_DIR "/media/apps"
+#define OPKG_CONF_DEFAULT_RDM_DL_DIR     "/rdm/downloads"
+#else
 #define OPKG_CONF_DEFAULT_DEST_ROOT_DIR "/"
-
+#endif
 #define OPKG_CONF_DEFAULT_HASH_LEN 1024
 
 #define OPKG_CONF_DEFAULT_SIGNATURE_TYPE "gpg"
Index: opkg-0.5.0/libopkg/opkg_download.c
===================================================================
--- opkg-0.5.0.orig/libopkg/opkg_download.c
+++ opkg-0.5.0/libopkg/opkg_download.c
@@ -145,9 +145,54 @@ static int opkg_download_internal(const
     return opkg_download_backend(src, dest, cb, data, use_cache);
 }
 
+#ifdef HAVE_RDM
+static char* parse_rdm_app_name_from_filename(char *filename)
+{
+    char *to_remove = "-signed.tar";
+    char *prev_token = NULL;
+
+    char *token = strtok(filename, "_");
+    while( NULL != token ) {
+        prev_token = token;
+        token = strtok(NULL, "_");
+    }
+
+    if (NULL != prev_token) {
+        if(NULL != (token = strstr(prev_token, to_remove))) {
+            filename[token - filename] = '\0';
+            memmove(filename, prev_token, strlen(prev_token)+1);
+            return filename;
+        }
+    }
+
+    free(filename);
+    return NULL;
+}
+
+char *get_rdm_cache_location(const char *src)
+{
+    char *cache_location = NULL;
+    char *short_file_name;
+    char *tmp = xstrdup(src);
+
+    short_file_name = basename(tmp);
+    if (strlen(short_file_name) > MAX_SHORT_FILE_NAME_LENGTH)
+        short_file_name[MAX_SHORT_FILE_NAME_LENGTH] = '\0';
+
+    char *rdm_app_name = parse_rdm_app_name_from_filename(xstrdup(short_file_name));
+
+    if (NULL != rdm_app_name) {
+        sprintf_alloc(&cache_location, "%s%s/%s/%s", opkg_config->cache_dir, OPKG_CONF_DEFAULT_RDM_DL_DIR, rdm_app_name, short_file_name);
+        free(rdm_app_name);
+    }
+
+    free(tmp);
+    return cache_location;
+}
+#endif
+
 /** \brief get_cache_location: generate cached file path
  *
- * \param src absolute URI of remote file to generate path for
  * \return generated file path
  *
  */
@@ -196,6 +241,7 @@ static int opkg_download_direct(const ch
 
 /** \brief opkg_download_cache: downloads file into cache
  *
+ * \param src absolute URI of remote file to generate path for
  * \param src absolute URI of file to download
  * \param cb callback for curl download progress
  * \param data data to pass to progress callback
@@ -207,12 +253,59 @@ char *opkg_download_cache(const char *sr
     char *cache_location;
     int err;
 
+#ifdef HAVE_RDM
+    char app_download_command[512] = {0};
+    cache_location = get_rdm_cache_location(src);
+
+    if (NULL != cache_location) {
+        FILE *LOG = fopen("/opt/logs/rdm_status.log", "a+");
+        char *cache_location_dir = xdirname(cache_location);
+        char *rdm_app_name = basename(cache_location_dir);
+        char *cache_app_dir;
+        sprintf_alloc(&cache_app_dir, "%s/%s/", opkg_config->cache_dir, rdm_app_name);
+
+        if (file_is_dir(cache_location_dir)) {
+            fprintf(LOG, "opkg_download_cache: %s already exists. Removing it to clear old contents\n", cache_location_dir);
+            rm_r(cache_location_dir);
+        }
+
+        if (file_is_dir(cache_app_dir)) {
+            fprintf(LOG, "opkg_download_cache: %s already exists. Removing it to clear old contents\n", cache_app_dir);
+            rm_r(cache_app_dir);
+        }
+
+        fprintf(LOG, "opkg_download_cache: Creating %s\n", cache_location_dir);
+        file_mkdir_hier(cache_location_dir, 0755);
+
+        fprintf(LOG, "opkg_download_cache: Creating %s\n", cache_app_dir);
+        file_mkdir_hier(cache_app_dir, 0755);
+        free(cache_app_dir);
+
+        sprintf(app_download_command, "source /etc/rdm/downloadUtils.sh; DOWNLOAD_LOCATION=%s applicationDownload \"%s\"", cache_location_dir, src);
+        fprintf(LOG, "opkg_download_internal: executing %s\n", app_download_command);
+        err = WEXITSTATUS(system(app_download_command));
+        if (err) {
+            fprintf(LOG, "opkg_download_cache: Download failed for %s package\n", rdm_app_name);
+            free(cache_location);
+            cache_location = NULL;
+            system("touch /tmp/.opkg_rdm_download_failed");
+        } else {
+            fprintf(LOG, "opkg_download_cache: Download success for %s package\n", rdm_app_name);
+        }
+
+        free(cache_location_dir);
+        fclose(LOG);
+    }
+#else
     cache_location = get_cache_location(src);
+
     err = opkg_download_internal(src, cache_location, cb, data, 1);
     if (err) {
         free(cache_location);
         cache_location = NULL;
     }
+#endif
+
     return cache_location;
 }
 
Index: opkg-0.5.0/configure.ac
===================================================================
--- opkg-0.5.0.orig/configure.ac
+++ opkg-0.5.0/configure.ac
@@ -111,6 +111,18 @@ if test "x$want_curl" = "xyes"; then
 fi
 AM_CONDITIONAL(HAVE_CURL, test "x$want_curl" = "xyes")
 
+# check for rdm
+AC_ARG_ENABLE(rdm,
+              AC_HELP_STRING([--enable-rdm], [Enable rdm package support
+      [[default=no]] ]),
+    [want_rdm="$enableval"], [want_rdm="no"])
+
+if test "x$want_rdm" = "xyes"; then
+
+  AC_DEFINE(HAVE_RDM, 1, [Define if you want rdm package support in opkg])
+fi
+AM_CONDITIONAL(HAVE_RDM, test "x$want_rdm" = "xyes")
+
 # check for sha256
 AC_ARG_ENABLE(sha256,
               AC_HELP_STRING([--enable-sha256], [Enable sha256sum check
Index: opkg-0.5.0/libopkg/opkg_install.c
===================================================================
--- opkg-0.5.0.orig/libopkg/opkg_install.c
+++ opkg-0.5.0/libopkg/opkg_install.c
@@ -788,6 +788,21 @@ static int install_data_files(pkg_t * pk
      * check_data_file_clashes() for more details. */
 
     opkg_msg(INFO, "Extracting data files to %s.\n", pkg->dest->root_dir);
+#ifdef HAVE_RDM
+    FILE *LOG = fopen("/opt/logs/rdm_status.log", "a+");
+    char *copy_filename = xstrdup(pkg->local_filename);
+    char *rdm_app_name = basename(dirname(copy_filename));
+
+    free(pkg->dest->root_dir);
+    pkg->dest->root_dir = NULL;
+
+    sprintf_alloc(&pkg->dest->root_dir, "%s/%s/", opkg_config->cache_dir, rdm_app_name);
+
+    fprintf(LOG, "install_data_files: Installing %s at %s\n", pkg->local_filename, pkg->dest->root_dir);
+    fclose(LOG);
+
+    free(copy_filename);
+#endif
     err = pkg_extract_data_files_to_dir(pkg, pkg->dest->root_dir);
     if (err) {
         return err;
@@ -888,6 +903,7 @@ int opkg_install_pkg(pkg_t * pkg, pkg_t
     int old_state_flag;
     sigset_t newset, oldset;
 
+#ifndef HAVE_RDM
     opkg_msg(DEBUG2, "Calling pkg_arch_supported.\n");
 
     if (!pkg_arch_supported(pkg)) {
@@ -896,6 +912,7 @@ int opkg_install_pkg(pkg_t * pkg, pkg_t
                  pkg->architecture, pkg->name);
         return -1;
     }
+#endif
 
     if (pkg->dest == NULL) {
         pkg->dest = opkg_config->default_dest;
Index: opkg-0.5.0/libopkg/pkg_hash.c
===================================================================
--- opkg-0.5.0.orig/libopkg/pkg_hash.c
+++ opkg-0.5.0/libopkg/pkg_hash.c
@@ -446,6 +446,7 @@ pkg_t *pkg_hash_fetch_best_installation_
                 continue;
             }
 
+#ifndef HAVE_RDM
             /* now check for supported architecture */
             opkg_msg(DEBUG, "%s arch=%s arch_priority=%d version=%s.\n",
                      maybe->name, maybe->architecture, maybe->arch_priority,
@@ -456,6 +457,7 @@ pkg_t *pkg_hash_fetch_best_installation_
                          maybe->name, maybe->version);
                 continue;
             }
+#endif
 
  add_matching_pkg:
             /* We make sure not to add the same package twice. Need to search
Index: opkg-0.5.0/libopkg/opkg_download.h
===================================================================
--- opkg-0.5.0.orig/libopkg/opkg_download.h
+++ opkg-0.5.0/libopkg/opkg_download.h
@@ -38,6 +38,9 @@ int opkg_download_pkg(pkg_t * pkg);
 int opkg_download_pkg_to_dir(pkg_t * pkg, const char *dir);
 char *pkg_download_signature(pkg_t * pkg);
 
+#ifdef HAVE_RDM
+char *get_rdm_cache_location(const char *src);
+#endif
 /*
  * Downloads file from url, installs in package database, return package name.
  */
Index: opkg-0.5.0/libopkg/opkg.c
===================================================================
--- opkg-0.5.0.orig/libopkg/opkg.c
+++ opkg-0.5.0/libopkg/opkg.c
@@ -24,6 +24,7 @@
 #include <unistd.h>
 #include <fnmatch.h>
 #include <stdlib.h>
+#include <rdm/rdm_rsa_signature_verify.h>
 
 #include "opkg.h"
 #include "opkg_conf.h"
@@ -210,6 +211,59 @@ int opkg_install_package(const char *pac
 
     opkg_assert(package_url != NULL);
 
+#ifdef HAVE_RDM
+    char *local_filename = get_rdm_cache_location(package_url);
+    char *rdm_cache_dir = xdirname(local_filename);
+    char *rdm_app_dir;
+
+    FILE *LOG = fopen("/opt/logs/rdm_status.log", "a+");
+
+    if (file_exists(local_filename)) {
+        fprintf(LOG, "opkg_install_package: %s already present. Package already extracted. Checking signature\n", local_filename);
+        fprintf(LOG, "opkg_install_package: Calling rdm_signature_verify rdm_cache_dir = %s and rdm_app_name = %s\n", opkg_config->cache_dir, basename(rdm_cache_dir));
+
+        /* verify signature of the RDM package */
+        err = rdm_signature_verify(opkg_config->cache_dir, basename(rdm_cache_dir), 0);
+
+        if (err) {
+            fprintf(LOG, "opkg_install_package: rdm_signature_verify failed with return code = %d\n", err);
+
+            sprintf_alloc(&rdm_app_dir, "%s/%s", opkg_config->cache_dir, basename(rdm_cache_dir));
+            fprintf(LOG, "opkg_install_package: cleaning up %s and %s\n", rdm_cache_dir, rdm_app_dir);
+            rm_r(rdm_cache_dir);
+            rm_r(rdm_app_dir);
+            free(rdm_app_dir);
+        } else {
+            fprintf(LOG, "opkg_install_package: rdm_signature_verify success with return code = %d\n", err);
+            system("touch /tmp/.opkg_rdm_sign_verify_success");
+            free(rdm_cache_dir);
+            free(local_filename);
+            fclose(LOG);
+            return 0; 
+        }
+    }
+
+    /* Check if we want to use /media/apps or /tmp as download path. Sometimes /media/apps might not have space
+     * /etc/rdm/getRdmDwldPath.sh will return
+     *      1 - use /tmp
+     *      0 - use /media/apps
+     */
+    char command[256] = {0};
+    sprintf(command, "sh /etc/rdm/getRdmDwldPath.sh \"%s\"", basename(rdm_cache_dir));
+    fprintf(LOG, "opkg_install_package: Executing %s to get RDM download path\n", command);
+    int use_tmp = WEXITSTATUS(system(command));
+
+    if (1 == use_tmp) {
+        free(opkg_config->cache_dir);
+        opkg_config->cache_dir = xstrdup("/tmp");
+    }
+        
+    fprintf(LOG, "opkg_install_package: Setting download path for %s to %s\n", basename(rdm_cache_dir), opkg_config->cache_dir);
+    free(rdm_cache_dir);
+    free(local_filename);
+    fclose(LOG); 
+#endif
+
     /* Pre-process the package name to handle remote URLs and paths to
      * ipk/opk files.
      */
@@ -244,6 +298,7 @@ int opkg_install_package(const char *pac
     /* find dependancies and download them */
     deps = pkg_vec_alloc();
     /* this function does not return the original package, so we insert it later */
+#ifndef HAVE_RDM
     pkg_hash_fetch_unsatisfied_dependencies(new, deps, &unresolved);
     if (unresolved) {
         char **tmp = unresolved;
@@ -260,7 +315,7 @@ int opkg_install_package(const char *pac
         opkg_message(ERROR, "\n");
         return -1;
     }
-
+#endif
     /* insert the package we are installing so that we download it */
     pkg_vec_insert(deps, new);
 
@@ -328,11 +383,35 @@ int opkg_install_package(const char *pac
 
     progress(&pdata, 90, progress_callback, user_data);
 
+#ifndef HAVE_RDM
     /* run configure scripts, etc. */
     err = opkg_configure_packages(NULL);
     if (err) {
         return -1;
     }
+#else
+    local_filename = get_rdm_cache_location(package_url);
+    rdm_cache_dir = xdirname(local_filename);
+    LOG = fopen("/opt/logs/rdm_status.log", "a+");
+    fprintf(LOG, "opkg_install_package: Calling rdm_signature_verify rdm_cache_dir = %s and rdm_app_name = %s\n", opkg_config->cache_dir, basename(rdm_cache_dir));
+
+    /* verify signature of the RDM package */
+    err = rdm_signature_verify(opkg_config->cache_dir, basename(rdm_cache_dir), 1);
+
+    free(rdm_cache_dir);
+    free(local_filename);
+
+    if (err) {
+        fprintf(LOG, "opkg_install_package: rdm_signature_verify failed with return code = %d\n", err);
+        system("touch /tmp/.opkg_rdm_sign_verify_failed");
+        fclose(LOG);
+        return -1;
+    }
+
+    fprintf(LOG, "opkg_install_package: rdm_signature_verify success with return code = %d\n", err);
+    system("touch /tmp/.opkg_rdm_sign_verify_success");
+    fclose(LOG);
+#endif
 
     /* write out status files and file lists */
     opkg_conf_write_status_files();

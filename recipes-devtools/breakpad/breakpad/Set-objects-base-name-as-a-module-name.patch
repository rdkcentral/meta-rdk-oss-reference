From 5e52b80887d518f729dcaecdca14f80205d9702d Mon Sep 17 00:00:00 2001
From: mselva006c <mani_selvaraj@comcast.com>
Date: Wed, 20 Jan 2021 21:06:20 +0000
Subject: [PATCH] Set objects base name as a module name
         The breakpad version 2_1.0 used in dunfell uses an object's DT_SONAME as 
         the name for a module if it exists(Commit id - 3e56ef9d4e328142c07605a0bde1dfd2ed122611 and 5085b1d0df9c4b6f0f32b100f88611bc2beb3c09).
         This caused a regression in BT extraction with rdk tools. So reverting this change and used base name of a object as in morty version. 

Source: COMCAST
License: COMCAST

Upstream-Status: Inappropriate [Comcast specific]

Signed-off-by: mselva006c <mani_selvaraj@comcast.com>

Index: git/src/client/linux/minidump_writer/linux_dumper.cc
===================================================================
--- git.orig/src/client/linux/minidump_writer/linux_dumper.cc
+++ git/src/client/linux/minidump_writer/linux_dumper.cc
@@ -439,6 +439,48 @@ bool LinuxDumper::GetMappingAbsolutePath
 }
 
 namespace {
+bool ElfFileSoNameFromMappedFile(
+   const void* elf_base, char* soname, size_t soname_size) {
+  if (!IsValidElf(elf_base)) {
+      // Not ELF
+      return false;
+  }
+
+  const void* segment_start;
+  size_t segment_size;
+  if (!FindElfSection(elf_base, ".dynamic", SHT_DYNAMIC, &segment_start,
+                      &segment_size)) {
+    // No dynamic section
+    return false;
+  }
+
+  const void* dynstr_start;
+  size_t dynstr_size;
+  if (!FindElfSection(elf_base, ".dynstr", SHT_STRTAB, &dynstr_start,
+                      &dynstr_size)) {
+    // No dynstr section
+    return false;
+  }
+
+  const ElfW(Dyn)* dynamic = static_cast<const ElfW(Dyn)*>(segment_start);
+  size_t dcount = segment_size / sizeof(ElfW(Dyn));
+  for (const ElfW(Dyn)* dyn = dynamic; dyn < dynamic + dcount; ++dyn) {
+    if (dyn->d_tag == DT_SONAME) {
+      const char* dynstr = static_cast<const char*>(dynstr_start);
+      if (dyn->d_un.d_val >= dynstr_size) {
+       // Beyond the end of the dynstr section
+        return false;
+      }
+      const char* str = dynstr + dyn->d_un.d_val;
+      const size_t maxsize = dynstr_size - dyn->d_un.d_val;
+      my_strlcpy(soname, str, maxsize < soname_size ? maxsize : soname_size);
+      return true;
+    }
+  }
+
+  // Did not find SONAME
+  return false;
+}
 // Find the shared object name (SONAME) by examining the ELF information
 // for |mapping|. If the SONAME is found copy it into the passed buffer
 // |soname| and return true. The size of the buffer is |soname_size|.
@@ -473,26 +515,19 @@ void LinuxDumper::GetMappingEffectiveNam
                                                  size_t file_name_size) {
   my_strlcpy(file_path, mapping.name, file_path_size);
 
-  // Tools such as minidump_stackwalk use the name of the module to look up
-  // symbols produced by dump_syms. dump_syms will prefer to use a module's
-  // DT_SONAME as the module name, if one exists, and will fall back to the
-  // filesystem name of the module.
-
-  // Just use the filesystem name if no SONAME is present.
-  if (!ElfFileSoName(*this, mapping, file_name, file_name_size)) {
-    //   file_path := /path/to/libname.so
-    //   file_name := libname.so
-    const char* basename = my_strrchr(file_path, '/');
-    basename = basename == NULL ? file_path : (basename + 1);
-    my_strlcpy(file_name, basename, file_name_size);
-    return;
+  // If an executable is mapped from a non-zero offset, this is likely because
+  // the executable was loaded directly from inside an archive file (e.g., an
+  // apk on Android). We try to find the name of the shared object (SONAME) by
+  // looking in the file for ELF sections.
+  bool mapped_from_archive = false;
+  if (mapping.exec && mapping.offset != 0) {
+    mapped_from_archive =
+        ElfFileSoName(*this, mapping, file_name, file_name_size);
   }
 
-  if (mapping.exec && mapping.offset != 0) {
-    // If an executable is mapped from a non-zero offset, this is likely because
-    // the executable was loaded directly from inside an archive file (e.g., an
-    // apk on Android).
-    // In this case, we append the file_name to the mapped archive path:
+  if (mapped_from_archive) {
+    // Some tools (e.g., stackwalk) extract the basename from the pathname. In
+    // this case, we append the file_name to the mapped archive path as follows:
     //   file_name := libname.so
     //   file_path := /path/to/ARCHIVE.APK/libname.so
     if (my_strlen(file_path) + 1 + my_strlen(file_name) < file_path_size) {
@@ -500,15 +535,12 @@ void LinuxDumper::GetMappingEffectiveNam
       my_strlcat(file_path, file_name, file_path_size);
     }
   } else {
-    // Otherwise, replace the basename with the SONAME.
-    char* basename = const_cast<char*>(my_strrchr(file_path, '/'));
-    if (basename) {
-      my_strlcpy(basename + 1, file_name,
-                 file_path_size - my_strlen(file_path) +
-                     my_strlen(basename + 1));
-    } else {
-      my_strlcpy(file_path, file_name, file_path_size);
-    }
+    // Common case:
+    //   file_path := /path/to/libname.so
+    //   file_name := libname.so
+    const char* basename = my_strrchr(file_path, '/');
+    basename = basename == NULL ? file_path : (basename + 1);
+    my_strlcpy(file_name, basename, file_name_size);
   }
 }
 
Index: git/src/common/linux/dump_symbols.cc
===================================================================
--- git.orig/src/common/linux/dump_symbols.cc
+++ git/src/common/linux/dump_symbols.cc
@@ -963,11 +963,7 @@ bool InitModuleForElfClass(const typenam
     return false;
   }
 
-  char name_buf[NAME_MAX] = {};
-  std::string name = google_breakpad::ElfFileSoNameFromMappedFile(
-                         elf_header, name_buf, sizeof(name_buf))
-                         ? name_buf
-                         : google_breakpad::BaseName(obj_filename);
+  string name = google_breakpad::BaseName(obj_filename);
 
   // Add an extra "0" at the end.  PDB files on Windows have an 'age'
   // number appended to the end of the file identifier; this isn't
Index: git/src/common/linux/elfutils.cc
===================================================================
--- git.orig/src/common/linux/elfutils.cc
+++ git/src/common/linux/elfutils.cc
@@ -173,65 +173,4 @@ bool FindElfSegments(const void* elf_map
   return false;
 }
 
-template <typename ElfClass>
-bool FindElfSoNameFromDynamicSection(const void* section_start,
-                                     size_t section_size,
-                                     const void* dynstr_start,
-                                     size_t dynstr_size,
-                                     char* soname,
-                                     size_t soname_size) {
-  typedef typename ElfClass::Dyn Dyn;
-
-  auto* dynamic = static_cast<const Dyn*>(section_start);
-  size_t dcount = section_size / sizeof(Dyn);
-  for (const Dyn* dyn = dynamic; dyn < dynamic + dcount; ++dyn) {
-    if (dyn->d_tag == DT_SONAME) {
-      const char* dynstr = static_cast<const char*>(dynstr_start);
-      if (dyn->d_un.d_val >= dynstr_size) {
-        // Beyond the end of the dynstr section
-        return false;
-      }
-      const char* str = dynstr + dyn->d_un.d_val;
-      const size_t maxsize = dynstr_size - dyn->d_un.d_val;
-      my_strlcpy(soname, str, maxsize < soname_size ? maxsize : soname_size);
-      return true;
-    }
-  }
-
-  return false;
-}
-
-bool ElfFileSoNameFromMappedFile(const void* elf_base,
-                                 char* soname,
-                                 size_t soname_size) {
-  if (!IsValidElf(elf_base)) {
-    // Not ELF
-    return false;
-  }
-
-  const void* segment_start;
-  size_t segment_size;
-  if (!FindElfSection(elf_base, ".dynamic", SHT_DYNAMIC, &segment_start,
-                      &segment_size)) {
-    // No dynamic section
-    return false;
-  }
-
-  const void* dynstr_start;
-  size_t dynstr_size;
-  if (!FindElfSection(elf_base, ".dynstr", SHT_STRTAB, &dynstr_start,
-                      &dynstr_size)) {
-    // No dynstr section
-    return false;
-  }
-
-  int cls = ElfClass(elf_base);
-  return cls == ELFCLASS32 ? FindElfSoNameFromDynamicSection<ElfClass32>(
-                                 segment_start, segment_size, dynstr_start,
-                                 dynstr_size, soname, soname_size)
-                           : FindElfSoNameFromDynamicSection<ElfClass64>(
-                                 segment_start, segment_size, dynstr_start,
-                                 dynstr_size, soname, soname_size);
-}
-
 }  // namespace google_breakpad
Index: git/src/common/linux/elfutils.h
===================================================================
--- git.orig/src/common/linux/elfutils.h
+++ git/src/common/linux/elfutils.h
@@ -45,7 +45,6 @@ namespace google_breakpad {
 // with specific ELF bits.
 struct ElfClass32 {
   typedef Elf32_Addr Addr;
-  typedef Elf32_Dyn Dyn;
   typedef Elf32_Ehdr Ehdr;
   typedef Elf32_Nhdr Nhdr;
   typedef Elf32_Phdr Phdr;
@@ -63,7 +62,6 @@ struct ElfClass32 {

 struct ElfClass64 {
   typedef Elf64_Addr Addr;
-  typedef Elf64_Dyn Dyn;
   typedef Elf64_Ehdr Ehdr;
   typedef Elf64_Nhdr Nhdr;
   typedef Elf64_Phdr Phdr;
@@ -124,12 +122,6 @@ const T*
 GetOffset(const typename ElfClass::Ehdr* elf_header,
           typename ElfClass::Off offset);

-// Read the value of DT_SONAME from the elf file mapped at |elf_base|. Returns
-// true and fills |soname| with the result if found.
-bool ElfFileSoNameFromMappedFile(const void* elf_base,
-                                 char* soname,
-                                 size_t soname_size);
-
 }  // namespace google_breakpad

 #endif  // COMMON_LINUX_ELFUTILS_H_

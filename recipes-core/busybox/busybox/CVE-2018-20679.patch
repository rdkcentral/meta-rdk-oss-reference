##########################################
Date: Apr 4, 2021 3:41 PM
From: https://git.busybox.net/busybox/commit/?id=6d3b4bb24da9a07c263f3c1acf8df85382ff562c 
Subject: [PATCH] udhcpc: check that 4-byte options are indeed 4-byte
Source: Busybox patches
License: GPLV2
Upstream-Status: Submitted [https://git.busybox.net/busybox/commit/?id=6d3b4bb24da9a07c263f3c1acf8df85382ff562c]
Signed-off-by: Uma_Kumar<uma_kumar@comcast.com>
##########################################

Index: busybox-1.24.1/networking/udhcp/common.c
===================================================================
--- busybox-1.24.1.orig/networking/udhcp/common.c
+++ busybox-1.24.1/networking/udhcp/common.c
@@ -257,6 +257,15 @@ uint8_t* FAST_FUNC udhcp_get_option(stru
 			continue; /* complain and return NULL */
 
 		if (optionptr[OPT_CODE] == code) {
+			if (optionptr[OPT_LEN] == 0) {
+				/* So far no valid option with length 0 known.
+				 * Having this check means that searching
+			 * for DHCP_MESSAGE_TYPE need not worry
+				 * that returned pointer might be unsafe
+				 * to dereference.
+				 */
+				continue; /* complain and return NULL */
+			}
 			log_option("Option found", optionptr);
 			return optionptr + OPT_DATA;
 		}
@@ -273,6 +282,16 @@ uint8_t* FAST_FUNC udhcp_get_option(stru
 	return NULL;
 }
 
+uint8_t* FAST_FUNC udhcp_get_option32(struct dhcp_packet *packet, int code)
+{
+	uint8_t *r = udhcp_get_option(packet, code);
+	if (r) {
+		if (r[-1] != 4)
+			r = NULL;
+	}
+	return r;
+}
+
 /* Return the position of the 'end' option (no bounds checking) */
 int FAST_FUNC udhcp_end_option(uint8_t *optionptr)
 {
Index: busybox-1.24.1/networking/udhcp/common.h
===================================================================
--- busybox-1.24.1.orig/networking/udhcp/common.h
+++ busybox-1.24.1/networking/udhcp/common.h
@@ -195,6 +195,10 @@ extern const uint8_t dhcp_option_lengths
 unsigned FAST_FUNC udhcp_option_idx(const char *name);
 
 uint8_t *udhcp_get_option(struct dhcp_packet *packet, int code) FAST_FUNC;
+/* Same as above + ensures that option length is 4 bytes
+ * (returns NULL if size is different)
+ */
+uint8_t *udhcp_get_option32(struct dhcp_packet *packet, int code) FAST_FUNC;
 int udhcp_end_option(uint8_t *optionptr) FAST_FUNC;
 void udhcp_add_binary_option(struct dhcp_packet *packet, uint8_t *addopt) FAST_FUNC;
 void udhcp_add_simple_option(struct dhcp_packet *packet, uint8_t code, uint32_t data) FAST_FUNC;
Index: busybox-1.24.1/networking/udhcp/dhcpc.c
===================================================================
--- busybox-1.24.1.orig/networking/udhcp/dhcpc.c
+++ busybox-1.24.1/networking/udhcp/dhcpc.c
@@ -1697,7 +1697,7 @@ int udhcpc_main(int argc UNUSED_PARAM, c
  * They say ISC DHCP client supports this case.
  */
 				server_addr = 0;
-				temp = udhcp_get_option(&packet, DHCP_SERVER_ID);
+				temp = udhcp_get_option32(&packet, DHCP_SERVER_ID);
 				if (!temp) {
 					bb_error_msg("no server ID, using 0.0.0.0");
 				} else {
@@ -1725,7 +1725,7 @@ int udhcpc_main(int argc UNUSED_PARAM, c
 				uint8_t *temp;
 
 				udhcp_run_script(NULL, "reply");
-				temp = udhcp_get_option(&packet, DHCP_LEASE_TIME);
+				temp = udhcp_get_option32(&packet, DHCP_LEASE_TIME);
 				if (!temp) {
 					bb_error_msg("no lease time with ACK, using 1 hour lease");
 					lease_seconds = 60 * 60;
@@ -1818,7 +1818,7 @@ int udhcpc_main(int argc UNUSED_PARAM, c
 					uint32_t svid;
 					uint8_t *temp;
 
-					temp = udhcp_get_option(&packet, DHCP_SERVER_ID);
+					temp = udhcp_get_option32(&packet, DHCP_SERVER_ID);
 					if (!temp) {
  non_matching_svid:
 						log1("%s with wrong server ID, ignoring packet",
Index: busybox-1.24.1/networking/udhcp/dhcpd.c
===================================================================
--- busybox-1.24.1.orig/networking/udhcp/dhcpd.c
+++ busybox-1.24.1/networking/udhcp/dhcpd.c
@@ -132,7 +132,7 @@ static void add_server_options(struct dh
 static uint32_t select_lease_time(struct dhcp_packet *packet)
 {
 	uint32_t lease_time_sec = server_config.max_lease_sec;
-	uint8_t *lease_time_opt = udhcp_get_option(packet, DHCP_LEASE_TIME);
+	uint8_t *lease_time_opt = udhcp_get_option32(packet, DHCP_LEASE_TIME);
 	if (lease_time_opt) {
 		move_from_unaligned32(lease_time_sec, lease_time_opt);
 		lease_time_sec = ntohl(lease_time_sec);
@@ -472,7 +472,7 @@ int udhcpd_main(int argc UNUSED_PARAM, c
 		}
 
 		/* Get SERVER_ID if present */
-		server_id_opt = udhcp_get_option(&packet, DHCP_SERVER_ID);
+		server_id_opt = udhcp_get_option32(&packet, DHCP_SERVER_ID);
 		if (server_id_opt) {
 			uint32_t server_id_network_order;
 			move_from_unaligned32(server_id_network_order, server_id_opt);
@@ -496,7 +496,7 @@ int udhcpd_main(int argc UNUSED_PARAM, c
 		}
 
 		/* Get REQUESTED_IP if present */
-		requested_ip_opt = udhcp_get_option(&packet, DHCP_REQUESTED_IP);
+		requested_ip_opt = udhcp_get_option32(&packet, DHCP_REQUESTED_IP);
 		if (requested_ip_opt) {
 			move_from_unaligned32(requested_nip, requested_ip_opt);
 		}


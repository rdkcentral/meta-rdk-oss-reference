From e0c8883dc71335e31dd90fe4c22b4ac1dd01b7c5 Mon Sep 17 00:00:00 2001
From: Piotr Marcinkowski <piotr.marcinkowski@redembedded.com>
Date: Thu, 7 Sep 2023 17:26:06 +0000
Source: LGI
Subject: [PATCH] RDKDEV-828 Fix deadlocks in gstadaptivedemux

This patch fixes synchronization issues that were causing deadlocks
in gstadaptivedemux. The deadlocks were observed in different scenarios
and were caused by multiple code errors. This patch combines all
fixes found so far.

Some of the changes in this patch were taken from the patch published
in the following issue ticket:
https://gitlab.freedesktop.org/gstreamer/gst-plugins-bad/-/issues/611
(https://gitlab.freedesktop.org/gstreamer/gst-plugins-bad/uploads/0e34bdf6071b119e041b67253fbdc1f8/0001-adaptivedemux-Fix-some-deadlocks-due-to-manifest-loc.patch)

The patch proposed in that link fixed several cases leading to deadlock
but wasn't covering the ones that rely on specific error condition
to happen, eg. HTTP request error.

There were cases observed in a number of apps, eg. TV Francaise where
infrequently HTTP requests were ending up with error response -
in that particular case it was 412 (Precondition Failed) error.

One of the deadlock conditions addressed in this patch was receiving
412 error response when manifest fetch request was in progress.

This patch can safely replace the patch from the ticket
https://gitlab.freedesktop.org/gstreamer/gst-plugins-bad/-/issues/611
All of the changes from that original patch were included here
along with the new fixes that cover new cases of deadlocks in
gstadaptivedemux.
---
 gst-libs/gst/adaptivedemux/gstadaptivedemux.c | 21 ++++++++++++-------
 1 file changed, 13 insertions(+), 8 deletions(-)

diff --git a/gst-libs/gst/adaptivedemux/gstadaptivedemux.c b/gst-libs/gst/adaptivedemux/gstadaptivedemux.c
index 8a9b93d..dedc83b 100644
--- a/gst-libs/gst/adaptivedemux/gstadaptivedemux.c
+++ b/gst-libs/gst/adaptivedemux/gstadaptivedemux.c
@@ -796,10 +796,12 @@ gst_adaptive_demux_reset (GstAdaptiveDemux * demux)
   for (iter = demux->streams; iter; iter = g_list_next (iter)) {
     GstAdaptiveDemuxStream *stream = iter->data;
     if (stream->pad) {
+      GST_MANIFEST_UNLOCK (demux);
       gst_pad_push_event (stream->pad, gst_event_ref (eos));
       gst_pad_set_active (stream->pad, FALSE);
 
       gst_element_remove_pad (GST_ELEMENT_CAST (demux), stream->pad);
+      GST_MANIFEST_LOCK (demux);
     }
     gst_adaptive_demux_stream_free (stream);
   }
@@ -879,6 +881,7 @@ gst_adaptive_demux_handle_message (GstBin * bin, GstMessage * msg)
         if (stream == NULL) {
           GST_WARNING_OBJECT (demux,
               "Failed to locate stream for errored element");
+          GST_MANIFEST_UNLOCK (demux);
           break;
         }
       }
@@ -2473,6 +2476,7 @@ gst_adaptive_demux_stream_push_buffer (GstAdaptiveDemuxStream * stream,
     if (stream->cancelled) {
       GST_LOG_OBJECT (demux, "stream %p cancelled", stream);
       gst_buffer_unref (buffer);
+      GST_MANIFEST_LOCK (demux);
       g_mutex_unlock (&demux->priv->preroll_lock);
       return GST_FLOW_FLUSHING;
     }
@@ -2552,13 +2556,14 @@ gst_adaptive_demux_stream_push_buffer (GstAdaptiveDemuxStream * stream,
         "Stream was cancelled");
     ret = stream->last_ret = GST_FLOW_FLUSHING;
     g_mutex_unlock (&stream->fragment_download_lock);
+    GST_MANIFEST_UNLOCK (demux);
     return ret;
   }
   g_mutex_unlock (&stream->fragment_download_lock);
 
   GST_LOG_OBJECT (stream->pad, "Push result: %d %s", ret,
       gst_flow_get_name (ret));
-
+  GST_MANIFEST_UNLOCK (demux);
   return ret;
 }
 
@@ -3354,6 +3359,11 @@ gst_adaptive_demux_stream_download_uri (GstAdaptiveDemux * demux,
 
   gst_element_set_state (stream->src, GST_STATE_READY);
 
+  /* deactivate and reactivate our ghostpad to make it fresh for a new
+  * stream */
+  gst_pad_set_active (stream->internal_pad, FALSE);
+  gst_pad_set_active (stream->internal_pad, TRUE);
+
   /* Need to drop the fragment_download_lock to get the MANIFEST lock */
   GST_MANIFEST_LOCK (demux);
   g_mutex_lock (&stream->fragment_download_lock);
@@ -3364,11 +3374,6 @@ gst_adaptive_demux_stream_download_uri (GstAdaptiveDemux * demux,
   }
   g_mutex_unlock (&stream->fragment_download_lock);
 
-  /* deactivate and reactivate our ghostpad to make it fresh for a new
-   * stream */
-  gst_pad_set_active (stream->internal_pad, FALSE);
-  gst_pad_set_active (stream->internal_pad, TRUE);
-
   return ret;
 }
 
@@ -4110,12 +4115,12 @@ gst_adaptive_demux_updates_loop (GstAdaptiveDemux * demux)
     }
     g_mutex_unlock (&demux->priv->updates_timed_lock);
 
-    GST_MANIFEST_LOCK (demux);
-
     GST_DEBUG_OBJECT (demux, "Updating playlist");
 
     ret = gst_adaptive_demux_update_manifest (demux);
 
+    GST_MANIFEST_LOCK (demux);
+
     if (ret == GST_FLOW_EOS) {
     } else if (ret != GST_FLOW_OK) {
       /* update_failed_count is used only here, no need to protect it */
-- 
2.40.1


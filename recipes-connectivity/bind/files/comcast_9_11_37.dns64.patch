Date: 17th May 2022
From: COMCAST
Source: COMCAST
Subject: [PATCH] Comcast Non standard patch for dns64
Made from https://gerrit.teamccp.com/plugins/gitiles
/rdk/yocto_oe/layers/meta-rdk-comcast/+/topic/fr_yocto3.1
/recipes-connectivity/bind/files/comcast_dns64.patch
Signed-off-by: Balaji Punnuru <balaji_punnuru@cable.comcast.com>

Index: bind-9.11.19/bin/named/server.c
===================================================================
--- bind-9.11.19.orig/bin/named/server.c
+++ bind-9.11.19/bin/named/server.c
@@ -1777,7 +1777,7 @@ dns64_reverse(dns_view_t *view, isc_mem_
 	isc_result_t result;
 
 	REQUIRE(prefixlen == 32 || prefixlen == 40 || prefixlen == 48 ||
-		prefixlen == 56 || prefixlen == 64 || prefixlen == 96);
+		prefixlen == 56 || prefixlen == 64 || prefixlen == 96 || prefixlen == 128);
 
 	if (!strcmp(viewname, "_default")) {
 		sep = "";
Index: bind-9.11.19/lib/bind9/check.c
===================================================================
--- bind-9.11.19.orig/lib/bind9/check.c
+++ bind-9.11.19/lib/bind9/check.c
@@ -526,7 +526,7 @@ check_dns64(cfg_aclconfctx_t *actx, cons
 		}
 
 		if (prefixlen != 32 && prefixlen != 40 && prefixlen != 48 &&
-		    prefixlen != 56 && prefixlen != 64 && prefixlen != 96) {
+		    prefixlen != 56 && prefixlen != 64 && prefixlen != 96 && prefixlen != 128) {
 			cfg_obj_log(map, logctx, ISC_LOG_ERROR,
 				    "bad prefix length %u [32/40/48/56/64/96]",
 				    prefixlen);
@@ -564,7 +564,7 @@ check_dns64(cfg_aclconfctx_t *actx, cons
 			nbytes = prefixlen / 8 + 4;
 			if (prefixlen <= 64)
 				nbytes++;
-			if (memcmp(sa.type.in6.s6_addr, zeros, nbytes) != 0) {
+			if ((prefixlen != 128 ) && (memcmp(sa.type.in6.s6_addr, zeros, nbytes) != 0)) {
 				char netaddrbuf[ISC_NETADDR_FORMATSIZE];
 				isc_netaddr_format(&sa, netaddrbuf,
 						   sizeof(netaddrbuf));
Index: bind-9.11.19/lib/dns/dns64.c
===================================================================
--- bind-9.11.19.orig/lib/dns/dns64.c
+++ bind-9.11.19/lib/dns/dns64.c
@@ -61,8 +61,8 @@ dns_dns64_create(isc_mem_t *mctx, isc_ne
 	REQUIRE(prefix != NULL && prefix->family == AF_INET6);
 	/* Legal prefix lengths from rfc6052.txt. */
 	REQUIRE(prefixlen == 32 || prefixlen == 40 || prefixlen == 48 ||
-		prefixlen == 56 || prefixlen == 64 || prefixlen == 96);
-	REQUIRE(isc_netaddr_prefixok(prefix, prefixlen) == ISC_R_SUCCESS);
+		prefixlen == 56 || prefixlen == 64 || prefixlen == 96 || prefixlen == 128);
+	//REQUIRE(isc_netaddr_prefixok(prefix, prefixlen) == ISC_R_SUCCESS);
 	REQUIRE(dns64p != NULL && *dns64p == NULL);
 
 	if (suffix != NULL) {
@@ -72,15 +72,16 @@ dns_dns64_create(isc_mem_t *mctx, isc_ne
 		/* Bits 64-71 are zeros. rfc6052.txt */
 		if (prefixlen >= 32 && prefixlen <= 64)
 			nbytes++;
-		REQUIRE(memcmp(suffix->type.in6.s6_addr, zeros, nbytes) == 0);
-	}
-
+		if (prefixlen != 128) {
+		    REQUIRE(memcmp(suffix->type.in6.s6_addr, zeros, nbytes) == 0);
+         	}  
+        }
 	dns64 = isc_mem_get(mctx, sizeof(dns_dns64_t));
 	if (dns64 == NULL)
 		return (ISC_R_NOMEMORY);
 	memset(dns64->bits, 0, sizeof(dns64->bits));
 	memmove(dns64->bits, prefix->type.in6.s6_addr, prefixlen / 8);
-	if (suffix != NULL)
+	if ((suffix != NULL) && (prefixlen != 128))
 		memmove(dns64->bits + nbytes, suffix->type.in6.s6_addr + nbytes,
 			16 - nbytes);
 	dns64->clients = NULL;
@@ -129,6 +130,13 @@ dns_dns64_aaaafroma(const dns_dns64_t *d
 	unsigned int nbytes, i;
 	isc_result_t result;
 	int match;
+	FILE* f = NULL;
+	char buff[256] = {0};
+	time_t curtime;
+	struct timespec curtime_t;
+	//long msec;
+	struct tm *loctime;
+
 
 	if ((dns64->flags & DNS_DNS64_RECURSIVE_ONLY) != 0 &&
 	    (flags & DNS_DNS64_RECURSIVE) == 0)
@@ -162,22 +170,37 @@ dns_dns64_aaaafroma(const dns_dns64_t *d
 	}
 
 	nbytes = dns64->prefixlen / 8;
-	INSIST(nbytes <= 12);
-	/* Copy prefix. */
-	memmove(aaaa, dns64->bits, nbytes);
-	/* Bits 64-71 are zeros. rfc6052.txt */
-	if (nbytes == 8)
-		aaaa[nbytes++] = 0;
-	/* Copy mapped address. */
-	for (i = 0; i < 4U; i++) {
-		aaaa[nbytes++] = a[i];
-		/* Bits 64-71 are zeros. rfc6052.txt */
-		if (nbytes == 8)
-			aaaa[nbytes++] = 0;
-	}
-	/* Copy suffix. */
-	memmove(aaaa + nbytes, dns64->bits + nbytes, 16 - nbytes);
-	return (ISC_R_SUCCESS);
+        memmove(aaaa, dns64->bits, nbytes);
+        if (dns64->prefixlen != 128) {
+	   INSIST(nbytes <= 12);
+	   /* Copy prefix. */
+	   /* Bits 64-71 are zeros. rfc6052.txt */
+	   if (nbytes == 8)
+		   aaaa[nbytes++] = 0;
+	   /* Copy mapped address. */
+	   for (i = 0; i < 4U; i++) {
+		   aaaa[nbytes++] = a[i];
+		   /* Bits 64-71 are zeros. rfc6052.txt */
+		   if (nbytes == 8)
+			   aaaa[nbytes++] = 0;
+	   }
+	   /* Copy suffix. */
+	   memmove(aaaa + nbytes, dns64->bits + nbytes, 16 - nbytes);
+        }
+
+
+        f = fopen("/var/cache/bind/named.log","a+");
+        if (f != NULL) {
+           clock_gettime(CLOCK_REALTIME, &curtime_t);
+           curtime = curtime_t.tv_sec;
+           //msec = round(curtime_t.tv_nsec/1.0e6);
+           loctime = localtime(&curtime);
+           strftime(buff,sizeof(buff),"%F %T",loctime);
+           fprintf(f,"%s: DNS64 Address is being returned \n",buff);
+           fclose(f);
+        }	
+		
+        return (ISC_R_SUCCESS);
 }
 
 dns_dns64_t *

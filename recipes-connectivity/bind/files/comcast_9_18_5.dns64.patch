Date: Dec 14, 2022
From: Aravindan NarasimhapuramChakravarthy <aravindan_narasimhapuramchakravarthy@comcast.com>
Source: COMCAST
Subject: Build bind without readline config since readline-5.2 is casuing build errors in bind.
Re-create version specific patches to fix patch/install errors.
Signed-off-by: Aravindan NarasimhapuramChakravarthy <aravindan_narasimhapuramchakravarthy@comcast.com>
Index: bind-9.18.5/bin/named/server.c
===================================================================
--- bind-9.18.5.orig/bin/named/server.c
+++ bind-9.18.5/bin/named/server.c
@@ -1934,7 +1934,7 @@ dns64_reverse(dns_view_t *view, isc_mem_
 	isc_result_t result;
 
 	REQUIRE(prefixlen == 32 || prefixlen == 40 || prefixlen == 48 ||
-		prefixlen == 56 || prefixlen == 64 || prefixlen == 96);
+		prefixlen == 56 || prefixlen == 64 || prefixlen == 96 || prefixlen == 128);
 
 	if (!strcmp(viewname, "_default")) {
 		sep = "";
Index: bind-9.18.5/lib/bind9/check.c
===================================================================
--- bind-9.18.5.orig/lib/bind9/check.c
+++ bind-9.18.5/lib/bind9/check.c
@@ -606,7 +606,7 @@ check_dns64(cfg_aclconfctx_t *actx, cons
 		}
 
 		if (prefixlen != 32 && prefixlen != 40 && prefixlen != 48 &&
-		    prefixlen != 56 && prefixlen != 64 && prefixlen != 96)
+		    prefixlen != 56 && prefixlen != 64 && prefixlen != 96 && prefixlen != 128)
 		{
 			dns64_error(map, logctx, &na, prefixlen,
 				    "length is not 32/40/48/56/64/96");
@@ -648,7 +648,7 @@ check_dns64(cfg_aclconfctx_t *actx, cons
 			if (prefixlen <= 64) {
 				nbytes++;
 			}
-			if (memcmp(sa.type.in6.s6_addr, zeros, nbytes) != 0) {
+			if ((prefixlen != 128 ) && (memcmp(sa.type.in6.s6_addr, zeros, nbytes) != 0)) {
 				char netaddrbuf[ISC_NETADDR_FORMATSIZE];
 				isc_netaddr_format(&sa, netaddrbuf,
 						   sizeof(netaddrbuf));
Index: bind-9.18.5/lib/dns/dns64.c
===================================================================
--- bind-9.18.5.orig/lib/dns/dns64.c
+++ bind-9.18.5/lib/dns/dns64.c
@@ -25,6 +25,7 @@
 #include <dns/dns64.h>
 #include <dns/rdata.h>
 #include <dns/rdataset.h>
+#include <dns/log.h>
 
 struct dns_dns64 {
 	unsigned char bits[16]; /*
@@ -60,8 +61,8 @@ dns_dns64_create(isc_mem_t *mctx, const
 	REQUIRE(prefix != NULL && prefix->family == AF_INET6);
 	/* Legal prefix lengths from rfc6052.txt. */
 	REQUIRE(prefixlen == 32 || prefixlen == 40 || prefixlen == 48 ||
-		prefixlen == 56 || prefixlen == 64 || prefixlen == 96);
-	REQUIRE(isc_netaddr_prefixok(prefix, prefixlen) == ISC_R_SUCCESS);
+		prefixlen == 56 || prefixlen == 64 || prefixlen == 96 || prefixlen == 128);
+	//REQUIRE(isc_netaddr_prefixok(prefix, prefixlen) == ISC_R_SUCCESS);
 	REQUIRE(dns64p != NULL && *dns64p == NULL);
 
 	if (suffix != NULL) {
@@ -72,13 +73,15 @@ dns_dns64_create(isc_mem_t *mctx, const
 		if (prefixlen >= 32 && prefixlen <= 64) {
 			nbytes++;
 		}
-		REQUIRE(memcmp(suffix->type.in6.s6_addr, zeros, nbytes) == 0);
+		if (prefixlen != 128) {
+		    REQUIRE(memcmp(suffix->type.in6.s6_addr, zeros, nbytes) == 0);
+		}
 	}
 
 	dns64 = isc_mem_get(mctx, sizeof(dns_dns64_t));
 	memset(dns64->bits, 0, sizeof(dns64->bits));
 	memmove(dns64->bits, prefix->type.in6.s6_addr, prefixlen / 8);
-	if (suffix != NULL) {
+	if ((suffix != NULL) && (prefixlen != 128)) {
 		memmove(dns64->bits + nbytes, suffix->type.in6.s6_addr + nbytes,
 			16 - nbytes);
 	}
@@ -174,23 +177,28 @@ dns_dns64_aaaafroma(const dns_dns64_t *d
 	}
 
 	nbytes = dns64->prefixlen / 8;
-	INSIST(nbytes <= 12);
-	/* Copy prefix. */
 	memmove(aaaa, dns64->bits, nbytes);
-	/* Bits 64-71 are zeros. rfc6052.txt */
-	if (nbytes == 8) {
-		aaaa[nbytes++] = 0;
-	}
-	/* Copy mapped address. */
-	for (i = 0; i < 4U; i++) {
-		aaaa[nbytes++] = a[i];
-		/* Bits 64-71 are zeros. rfc6052.txt */
-		if (nbytes == 8) {
-			aaaa[nbytes++] = 0;
-		}
-	}
-	/* Copy suffix. */
-	memmove(aaaa + nbytes, dns64->bits + nbytes, 16 - nbytes);
+	if (dns64->prefixlen != 128) {
+	    INSIST(nbytes <= 12);
+	    /* Copy prefix. */
+	    /* Bits 64-71 are zeros. rfc6052.txt */
+	    if (nbytes == 8)
+		     aaaa[nbytes++] = 0;
+	    /* Copy mapped address. */
+	    for (i = 0; i < 4U; i++) {
+		    aaaa[nbytes++] = a[i];
+		    /* Bits 64-71 are zeros. rfc6052.txt */
+		    if (nbytes == 8)
+			    aaaa[nbytes++] = 0;
+	    }
+	    /* Copy suffix. */
+	    memmove(aaaa + nbytes, dns64->bits + nbytes, 16 - nbytes);
+	}
+
+	isc_log_write(dns_lctx, DNS_LOGCATEGORY_GENERAL,
+			DNS_LOGMODULE_JOURNAL, ISC_LOG_NOTICE,
+			"DNS64 Address is being returned");
+
 	return (ISC_R_SUCCESS);
 }
 

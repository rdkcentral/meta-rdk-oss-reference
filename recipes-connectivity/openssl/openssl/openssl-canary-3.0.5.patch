Date: May 18 2023
From: Sushant Daspute <sushant_daspute@comcast.com>
Subject: Openssl canary patch for kirkstone
Source: COMCAST
Signed-off-by: Sushant Daspute <sushant_daspute@comcast.com>
Index: openssl-3.0.5/crypto/ocsp/ocsp_prn.c
===================================================================
--- openssl-3.0.5.orig/crypto/ocsp/ocsp_prn.c
+++ openssl-3.0.5/crypto/ocsp/ocsp_prn.c
@@ -14,6 +14,8 @@
 #include "internal/cryptlib.h"
 #include <openssl/pem.h>
 
+#define CUSTOM_LOG "/rdklogs/logs/netstat.log"
+
 static int ocsp_certid_print(BIO *bp, OCSP_CERTID *a, int indent)
 {
     BIO_printf(bp, "%*sCertificate ID:\n", indent, "");
@@ -61,11 +63,14 @@ const char *OCSP_response_status_str(lon
 
 const char *OCSP_cert_status_str(long s)
 {
+    BIO *outbio = BIO_new_file(CUSTOM_LOG, "a");
     static const OCSP_TBLSTR cstat_tbl[] = {
         {V_OCSP_CERTSTATUS_GOOD, "good"},
         {V_OCSP_CERTSTATUS_REVOKED, "revoked"},
         {V_OCSP_CERTSTATUS_UNKNOWN, "unknown"}
     };
+    BIO_printf(outbio, "cert_status: %s\n", table2string(s, cstat_tbl));
+    BIO_free(outbio);
     return table2string(s, cstat_tbl);
 }
 
Index: openssl-3.0.5/include/openssl/ssl.h.in
===================================================================
--- openssl-3.0.5.orig/include/openssl/ssl.h.in
+++ openssl-3.0.5/include/openssl/ssl.h.in
@@ -1723,6 +1723,8 @@ __owur X509 *SSL_get1_peer_certificate(c
 
 __owur STACK_OF(X509) *SSL_get_peer_cert_chain(const SSL *s);
 
+int SSL_canary_cert_chain_logging(STACK_OF(X509) *r);
+
 __owur int SSL_CTX_get_verify_mode(const SSL_CTX *ctx);
 __owur int SSL_CTX_get_verify_depth(const SSL_CTX *ctx);
 __owur SSL_verify_cb SSL_CTX_get_verify_callback(const SSL_CTX *ctx);
Index: openssl-3.0.5/ssl/build.info
===================================================================
--- openssl-3.0.5.orig/ssl/build.info
+++ openssl-3.0.5/ssl/build.info
@@ -23,7 +23,7 @@ SOURCE[../libssl]=\
         methods.c   t1_lib.c  t1_enc.c tls13_enc.c \
         d1_lib.c  record/rec_layer_d1.c d1_msg.c \
         statem/statem_dtls.c d1_srtp.c \
-        ssl_lib.c ssl_cert.c ssl_sess.c \
+        ssl_lib.c ssl_canary.c ssl_cert.c ssl_sess.c \
         ssl_ciph.c ssl_stat.c ssl_rsa.c \
         ssl_asn1.c ssl_txt.c ssl_init.c ssl_conf.c  ssl_mcnf.c \
         bio_ssl.c ssl_err.c ssl_err_legacy.c tls_srp.c t1_trce.c ssl_utst.c \
Index: openssl-3.0.5/ssl/ssl_canary.c
===================================================================
--- /dev/null
+++ openssl-3.0.5/ssl/ssl_canary.c
@@ -0,0 +1,48 @@
+#include <stdio.h>
+#include "ssl_local.h"
+
+#define CUSTOM_LOG "/rdklogs/logs/netstat.log"
+
+int SSL_canary_cert_chain_logging(STACK_OF(X509) *r) {
+    char buf[BUFSIZ], *str = NULL;
+    int i = 0, j = 0;
+    BIO *outbio = BIO_new_file(CUSTOM_LOG, "a");
+    if (r != NULL) {
+         for (i = 0; i < sk_X509_num(r); i  ) {
+            if (i == 0) {
+                X509_NAME *subj = X509_get_subject_name(sk_X509_value(r, i));
+                for (j = 0; j < X509_NAME_entry_count(subj); j  ) {
+                    X509_NAME_ENTRY *e = X509_NAME_get_entry(subj, j);
+                    ASN1_STRING *d = X509_NAME_ENTRY_get_data(e);
+                    str = ASN1_STRING_data(d);
+                    if(str != NULL) {
+                        if(j == X509_NAME_entry_count(subj) - 1) {
+                            BIO_printf(outbio, "\nEnd point connection :%s\n", str);
+                        }
+                    }
+                }
+            }
+
+            X509_NAME_oneline(X509_get_subject_name(sk_X509_value(r, i)),
+                    buf, sizeof(buf));
+            BIO_printf(outbio, "%2d s:%s\n", i, buf);
+            X509_NAME_oneline(X509_get_issuer_name(sk_X509_value(r, i)),
+                    buf, sizeof(buf));
+            BIO_printf(outbio, "   i:%s\n", buf);
+            BIO_printf(outbio, "       certificate validity      \n");
+            BIO_printf(outbio, " notBefore: ");
+            ASN1_TIME_print(outbio, X509_get_notBefore(sk_X509_value(r, i)));
+            BIO_printf(outbio, "\n notAfter : ");
+            ASN1_TIME_print(outbio, X509_get_notAfter(sk_X509_value(r, i)));
+            if(str != NULL) {
+               BIO_printf(outbio, "   End_point :%s\n", str);
+            }
+            if (X509_cmp_current_time(X509_get_notAfter(sk_X509_value(r, i))) == -1) {
+                BIO_printf(outbio, "\n Certificate is expired/revoked for End_point :%s\n", str);
+            }
+        }
+    }
+    BIO_printf(outbio, "Length of the Cert chain: %d\n", i);
+    BIO_free(outbio);
+    return 0;
+}
Index: openssl-3.0.5/ssl/ssl_lib.c
===================================================================
--- openssl-3.0.5.orig/ssl/ssl_lib.c
+++ openssl-3.0.5/ssl/ssl_lib.c
@@ -1565,7 +1565,6 @@ int SSL_has_pending(const SSL *s)
 X509 *SSL_get1_peer_certificate(const SSL *s)
 {
     X509 *r = SSL_get0_peer_certificate(s);
-
     if (r != NULL)
         X509_up_ref(r);
 
@@ -1583,11 +1582,18 @@ X509 *SSL_get0_peer_certificate(const SS
 STACK_OF(X509) *SSL_get_peer_cert_chain(const SSL *s)
 {
     STACK_OF(X509) *r;
+    STACK_OF(X509) *certchain;
 
-    if ((s == NULL) || (s->session == NULL))
+    if ((s == NULL) || (s->session == NULL)) {
         r = NULL;
+	certchain = NULL;
+    }
     else
+    {
         r = s->session->peer_chain;
+	certchain = s->session->peer_chain;
+    }
+    SSL_canary_cert_chain_logging(certchain);
 
     /*
      * If we are a client, cert_chain includes the peer's own certificate; if
Index: openssl-3.0.5/util/libssl.num
===================================================================
--- openssl-3.0.5.orig/util/libssl.num
+++ openssl-3.0.5/util/libssl.num
@@ -520,3 +520,4 @@ SSL_load_client_CA_file_ex
 SSL_set0_tmp_dh_pkey                    521	3_0_0	EXIST::FUNCTION:
 SSL_CTX_set0_tmp_dh_pkey                522	3_0_0	EXIST::FUNCTION:
 SSL_group_to_name                       523	3_0_0	EXIST::FUNCTION:
+SSL_canary_cert_chain_logging           32767	3_0_0   EXIST::FUNCTION:

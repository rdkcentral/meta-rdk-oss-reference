Index: NetworkManager-1.43.7/src/core/nm-connectivity.c
===================================================================
--- NetworkManager-1.43.7.orig/src/core/nm-connectivity.c
+++ NetworkManager-1.43.7/src/core/nm-connectivity.c
@@ -248,7 +248,41 @@ cb_data_complete(NMConnectivityCheckHand
     nm_clear_g_source_inst(&cb_data->timeout_source);
 
     _LOG2D("check completed: %s; %s", nm_connectivity_state_to_string(state), log_message);
+    static void
+	on_dbus_call_finished(GDBusConnection *connection,
+			      GAsyncResult    *res,
+			gpointer         user_data)
+	    {
+	g_autoptr(GError) error = NULL;
 
+	if (!g_dbus_connection_call_finish(connection, res, &error)) {
+	_LOG2D("D-Bus call to NotifyConnected failed: %s", error->message);
+	} else {
+	_LOG2D("D-Bus call to NotifyConnected succeeded.");
+	}
+	}
+    _LOG2D("DEBUG: Create dbus name");
+   if (state == NM_CONNECTIVITY_FULL ) {
+g_autoptr(GError) error = NULL;
+GDBusConnection *connection = g_bus_get_sync(G_BUS_TYPE_SYSTEM, NULL, &error);
+if (connection) { 
+	g_dbus_connection_call(
+			connection,
+			"com.example.ConnectivityNotify",               // D-Bus service name
+			"/com/example/ConnectivityNotify",              // Object path
+			"com.example.ConnectivityNotify",               // Interface name
+			"NotifyConnected",                              // Method name
+			NULL,                                           // No parameters
+			NULL,                                           // No expected return type
+			G_DBUS_CALL_FLAGS_NONE,
+			-1,                                             // Default timeout
+			NULL,                                           // No cancellable
+			(GAsyncReadyCallback) on_dbus_call_finished, NULL                                      // No callbacks
+			);
+} else {
+	_LOG2D("DEBUG:Failed to get system bus: %s", error->message);
+}
+}
     cb_data->callback(self, cb_data, state, cb_data->user_data);
 
     /* Note: self might be a danling pointer at this point. It must not be used

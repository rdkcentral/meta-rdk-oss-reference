Index: NetworkManager-1.43.7/src/core/nm-connectivity.c
===================================================================
--- NetworkManager-1.43.7.orig/src/core/nm-connectivity.c	2023-05-03 14:04:10.000000000 +0000
+++ NetworkManager-1.43.7/src/core/nm-connectivity.c	2025-07-15 07:03:15.646033140 +0000
@@ -22,7 +22,9 @@
 #include "NetworkManagerUtils.h"
 #include "nm-dbus-manager.h"
 #include "dns/nm-dns-manager.h"
+#include <time.h>
 
+#define NM_CONNECTIVITY_INTERVAL_AFTER_FULL 0
 #define HEADER_STATUS_ONLINE "X-NetworkManager-Status: online\r\n"
 
 /*****************************************************************************/
@@ -196,7 +198,16 @@
 #endif
 
 /*****************************************************************************/
-
+static void
+nm_connectivity_set_interval(NMConnectivity *self, guint interval)
+{
+	 _LOGI("DBG: Set Interval");
+	    NMConnectivityPrivate *priv = NM_CONNECTIVITY_GET_PRIVATE(self);
+	    priv->interval = interval;
+	    _LOGI("DBG: Setting interval to %u",priv->interval);
+	    g_signal_emit(self, signals[CONFIG_CHANGED], 0);
+	    _LOGI("DBG:Emit config change signal");
+}
 static void
 cb_data_complete(NMConnectivityCheckHandle *cb_data,
                  NMConnectivityState        state,
@@ -247,7 +258,44 @@
 
     nm_clear_g_source_inst(&cb_data->timeout_source);
 
-    _LOG2D("check completed: %s; %s", nm_connectivity_state_to_string(state), log_message);
+// _LOG2D("check completed: %s; %s", nm_connectivity_state_to_string(state), log_message);
+
+    struct timespec ts;
+    clock_gettime(CLOCK_MONOTONIC, &ts);
+    long long uptime_ms = (ts.tv_sec * 1000LL) + (ts.tv_nsec / 1000000);
+
+    _LOG2D("check completed: %s; %s; uptime=%lldms",nm_connectivity_state_to_string(state), log_message, uptime_ms);
+    static gboolean already_notified = FALSE;
+    if (state == NM_CONNECTIVITY_FULL && !already_notified) {
+	    _LOG2D("DBG:status is full.register dbus");
+	    already_notified = TRUE;
+    g_autoptr(GError) error = NULL;
+    GDBusConnection *connection = g_bus_get_sync(G_BUS_TYPE_SYSTEM, NULL, &error);
+    _LOG2D("DBG: Trying to call D-Bus method NotifyConnected...");
+    if (connection) {
+	     g_dbus_connection_call(
+			     connection,
+			     "org.freedesktop.nm_connectivity",
+			     "/org/freedesktop/nm_connectivity",
+			     "org.freedesktop.nm_connectivity",
+			     "NotifyFullyConnected",
+			     NULL,
+			     NULL,
+			      G_DBUS_CALL_FLAGS_NONE,
+			      -1,
+			      NULL,
+			      NULL,
+			      NULL
+			     );
+	     nm_connectivity_set_interval(self, NM_CONNECTIVITY_INTERVAL_AFTER_FULL);
+	      _LOG2D("Connectivity FULL: interval set to %u seconds", NM_CONNECTIVITY_INTERVAL_AFTER_FULL);
+	       _LOGI("Connectivity FULL: interval set to %u seconds", NM_CONNECTIVITY_INTERVAL_AFTER_FULL);
+    } else {
+	     _LOG2D("DBG: Failed to get system bus: %s", error->message);
+    }
+    }
+
+
 
     cb_data->callback(self, cb_data, state, cb_data->user_data);
 

From 0f72a641d4446a67e8f54bdc44c51bc5da6b9fca Mon Sep 17 00:00:00 2001
From: Manoj Bhatta <manoj_bhatta@comcast.com>
Date: Fri, 10 Mar 2023 19:02:02 +0000
Subject: [PATCH] send event in thread context

---
 src/manette-device.c | 32 +++++++++++++++++++++++++-------
 1 file changed, 25 insertions(+), 7 deletions(-)

diff --git a/src/manette-device.c b/src/manette-device.c
index c1dde5a..d2b9603 100644
--- a/src/manette-device.c
+++ b/src/manette-device.c
@@ -59,6 +59,8 @@ struct _ManetteDevice
 
   gint fd;
   glong event_source_id;
+  GMutex poll_id_mutex;
+  GSource *event_src;
   struct libevdev *evdev_device;
   guint8 key_map[KEY_MAX];
   guint8 abs_map[ABS_MAX];
@@ -144,10 +146,15 @@ emit_event_signal_deferred (ManetteDevice *self,
                             guint          signal_id,
                             ManetteEvent  *event)
 {
-  g_idle_add_full (G_PRIORITY_DEFAULT_IDLE,
-                   (GSourceFunc) manette_device_event_signal_data_emit,
-                   manette_device_event_signal_data_new (self, signal_id, event),
-                   (GDestroyNotify) manette_device_event_signal_data_free);
+  GSource *source;
+  source = g_idle_source_new ();
+  g_source_set_callback (source,
+                         (GSourceFunc) manette_device_event_signal_data_emit,
+                          manette_device_event_signal_data_new (self, signal_id, event),
+                          (GDestroyNotify) manette_device_event_signal_data_free);
+
+  g_source_attach (source, g_main_context_get_thread_default());
+  g_source_unref (source);
 }
 
 static gboolean
@@ -224,6 +231,10 @@ remove_event_source (ManetteDevice *self)
 
   g_source_remove ((guint) self->event_source_id);
   self->event_source_id = -1;
+  if (self->event_src) {
+    g_source_destroy (self->event_src);
+    g_source_unref(self->event_src);
+  }
 }
 
 static void
@@ -236,6 +247,7 @@ manette_device_finalize (GObject *object)
   g_clear_pointer (&self->evdev_device, libevdev_free);
   g_clear_pointer (&self->guid, g_free);
   g_clear_object (&self->mapping);
+  g_mutex_clear (&self->poll_id_mutex);
 
   G_OBJECT_CLASS (manette_device_parent_class)->finalize (object);
 }
@@ -461,6 +473,7 @@ poll_events (GIOChannel    *source,
 {
   struct input_event evdev_event;
 
+  g_mutex_lock (&self->poll_id_mutex);
   g_assert (MANETTE_IS_DEVICE (self));
 
   while (libevdev_has_event_pending (self->evdev_device))
@@ -469,7 +482,8 @@ poll_events (GIOChannel    *source,
                              &evdev_event) == 0)
       on_evdev_event (self, &evdev_event);
 
-  return TRUE;
+  g_mutex_unlock (&self->poll_id_mutex);
+  return G_SOURCE_CONTINUE;
 }
 
 /**
@@ -530,10 +544,14 @@ manette_device_new (const gchar  *filename,
   }
 
   self->event_source_id = -1;
+  self->event_src = NULL;
+  g_mutex_init (&self->poll_id_mutex);
 
-  // Poll the events in the main loop.
+  // Poll the events in the thread context.
   channel = g_io_channel_unix_new (self->fd);
-  self->event_source_id = (glong) g_io_add_watch (channel, G_IO_IN, (GIOFunc) poll_events, self);
+  self->event_src = g_io_create_watch (channel,G_IO_IN);
+  g_source_set_callback (self->event_src,(GSourceFunc) poll_events,self, NULL);
+  self->event_source_id = g_source_attach (self->event_src,g_main_context_get_thread_default());
   buttons_number = 0;
 
   // Initialize the axes buttons and hats.

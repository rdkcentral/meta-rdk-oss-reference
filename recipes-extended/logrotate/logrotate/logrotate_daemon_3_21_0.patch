From: 8fa12015e3b8415c121fc9c0ca53aa872f7b0702f543afda7e32b6c4900f6516

Subject: [PATCH] logrotate_daemon_3_21_0.patch: Used to make logrotate as a daemon
As to avoid logrotate to call every 1 minute, making it 
as a daemon which will be calling internally the logrotate function every 1 minute.

Since continuous looping crash after 1 day we are making tabooCount = 0 and tabooPatterns = NULL.

Source: https://github.com/logrotate/logrotate/
License: GPL-2.0-only
Upstream-Status: Pending
Signed-off-by: Viknesh Velavan <Viknesh.velavan@sky.uk>

Index: logrotate-3.21.0/config.c
===================================================================
--- logrotate-3.21.0.orig/config.c
+++ logrotate-3.21.0/config.c
@@ -842,6 +842,9 @@ int readAllConfigPaths(const char **path
             result = 1;
     }
     free_2d_array(tabooPatterns, tabooCount);
+    tabooCount = 0;
+    /* realloc of NULL is safe by definition */
+    tabooPatterns = NULL;
     freeLogInfo(&defConfig);
     return result;
 }
Index: logrotate-3.21.0/logrotate.c
===================================================================
--- logrotate-3.21.0.orig/logrotate.c
+++ logrotate-3.21.0/logrotate.c
@@ -3094,7 +3094,7 @@ static int lockState(const char *stateFi
     return 0;
 }

-int main(int argc, const char **argv)
+int main_logrotate(int argc, const char **argv)
 {
     int force = 0;
     int skip_state_lock = 0;
@@ -3243,3 +3243,52 @@ int main(int argc, const char **argv)
 }

 /* vim: set et sw=4 ts=4: */
+
+int main(int argc, const char **argv)
+{
+	pid_t process_id = 0;
+	pid_t sid = 0;
+	const char **argv_max = (const char**)malloc(argc * sizeof(char*)) ;
+	memcpy(argv_max,argv,argc*sizeof(argv));
+	argv_max[2]="/tmp/logrotatemaxdata.status";
+	argv_max[3]="/etc/logrotatemax.conf";
+	/*Create child process */
+	process_id = fork();
+	// Indication of fork() failure
+	if (process_id < 0)
+	{
+		fprintf(stderr,"fork failed!\n");
+		exit(1);
+	}
+	else if (process_id > 0)
+	{
+		fprintf(stderr,"Logrotate Main Process Exit\n");
+		// return success in exit status
+		exit(0);
+	}
+	//unmask the file mode
+	umask(0);
+	//set new session
+	sid = setsid();
+	if(sid < 0)
+	{
+		fprintf(stderr,"sid Failure\n");
+		// Return failure
+		exit(1);
+	}
+	// Change the current working directory to root.
+	chdir("/");
+	// Close stdin. stdout and stderr
+	close(STDIN_FILENO);
+	close(STDOUT_FILENO);
+	close(STDERR_FILENO);
+	while (1)
+	{
+		main_logrotate(argc,argv);
+		/* Rotate Maximum size reached file */
+		/* main_logrotate(argc,argv_max); */
+		/* Calling the lograte function for every One minute to check and update the files need to be rotated */
+		sleep(60);
+	}
+	return(0);
+}

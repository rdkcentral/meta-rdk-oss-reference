Date: Sat, 19 Dec 2015 08:30:43 +0000

From a75160efd5874561ce6ca912d2272c10ac488b46 Mon Sep 17 00:00:00 2001

Subject: [PATCH] add extentions for http match rule specifications

	add extentions for http match rule specifications.

Source: GITHUB

License: GPL-2.0-or-later

Upstream-Status: Submitted

Signed-off-by: Khem Raj <raj.khem@gmail.com>
---
 extensions/libxt_httpcookie.c | 114 +++++++++++++++++++++++++++++++++
 extensions/libxt_httphost.c   | 133 +++++++++++++++++++++++++++++++++++++++
 extensions/libxt_httpurl.c    | 143 ++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 390 insertions(+)
 create mode 100644 extensions/libxt_httpcookie.c
 create mode 100644 extensions/libxt_httphost.c
 create mode 100644 extensions/libxt_httpurl.c

diff --git a/extensions/libxt_httpcookie.c b/extensions/libxt_httpcookie.c
new file mode 100644
index 0000000..2db9f95
--- /dev/null
+++ b/extensions/libxt_httpcookie.c
@@ -0,0 +1,114 @@
+ /*
+ * Copyright (c) 2010 by Cisco Systems, Inc. All Rights Reserved.
+ *
+ * This work is subject to U.S. and international copyright laws and
+ * treaties. No part of this work may be used, practiced, performed,
+ * copied, distributed, revised, modified, translated, abridged, condensed,
+ * expanded, collected, compiled, linked, recast, transformed or adapted
+ * without the prior written consent of Cisco Systems, Inc. Any use or
+ * exploitation of this work without authorization could subject the
+ * perpetrator to criminal and civil liability.
+ */
+
+#include <stdio.h>
+#include <netdb.h>
+#include <string.h>
+#include <stdlib.h>
+#include <getopt.h>
+#include <ctype.h>
+#include <xtables.h>
+#include <stddef.h>
+#include <linux/netfilter/xt_httpcookie.h>
+
+static void help(void)
+{
+	printf(
+"http cookie match options:\n"
+"--block-cookies             Block the contents of the Cookie header from HTTP requests\n");
+}
+
+static const struct option opts[] = {
+	{ "block-cookies", 0, NULL, '1' },
+	{ .name = NULL }
+};
+
+static void init(struct xt_entry_match *m)
+{
+}
+
+static int parse(int c,
+                 char **argv,
+                 int invert,
+                 unsigned int *flags,
+                 const void *entry,
+                 struct xt_entry_match **match)
+{
+	struct xt_httpcookie_info *info = (struct xt_httpcookie_info *)(*match)->data;
+	
+	info->block_cookies = 0;
+	
+	switch (c) {
+	case '1':
+		info->block_cookies = 1;
+		break;
+	default:
+		return 0;
+	}
+	
+	return 1;
+}
+
+static void check(unsigned int flags)
+{
+}
+
+static void print(const void *ip,
+                  const struct xt_entry_match *match,
+                  int numeric)
+{
+	const struct xt_httpcookie_info *info = (const struct xt_httpcookie_info*) match->data;
+	printf(" http cookie match %s", info->block_cookies ? "--block-cookies" : "");
+}
+
+static void save(const void *ip,
+                 const struct xt_entry_match *match)
+{
+	const struct xt_httpcookie_info *info = (const struct xt_httpcookie_info*) match->data;
+	printf("%s", info->block_cookies ? " --block-cookies" : "");
+}
+
+static struct xtables_match httpcookie_match = {
+	.family         = AF_INET,
+	.name           = "httpcookie",
+	.version        = XTABLES_VERSION,
+	.size           = XT_ALIGN(sizeof(struct xt_httpcookie_info)),
+	.userspacesize  = XT_ALIGN(sizeof(struct xt_httpcookie_info)),
+	.help           = help,
+	.init           = init,
+	.parse          = parse,
+	.final_check    = check,
+	.print          = print,
+	.save           = save,
+	.extra_opts     = opts,
+};
+
+static struct xtables_match httpcookie_match6 = {
+	.family         = AF_INET6,
+	.name           = "httpcookie",
+	.version        = XTABLES_VERSION,
+	.size           = XT_ALIGN(sizeof(struct xt_httpcookie_info)),
+	.userspacesize  = XT_ALIGN(sizeof(struct xt_httpcookie_info)),
+	.help           = help,
+	.init           = init,
+	.parse          = parse,
+	.final_check    = check,
+	.print          = print,
+	.save           = save,
+	.extra_opts     = opts,
+};
+
+void _init(void)
+{
+	xtables_register_match(&httpcookie_match);
+	xtables_register_match(&httpcookie_match6);
+}
diff --git a/extensions/libxt_httphost.c b/extensions/libxt_httphost.c
new file mode 100644
index 0000000..c22b6c3
--- /dev/null
+++ b/extensions/libxt_httphost.c
@@ -0,0 +1,133 @@
+ /*
+ * Copyright (c) 2010 by Cisco Systems, Inc. All Rights Reserved.
+ *
+ * This work is subject to U.S. and international copyright laws and
+ * treaties. No part of this work may be used, practiced, performed,
+ * copied, distributed, revised, modified, translated, abridged, condensed,
+ * expanded, collected, compiled, linked, recast, transformed or adapted
+ * without the prior written consent of Cisco Systems, Inc. Any use or
+ * exploitation of this work without authorization could subject the
+ * perpetrator to criminal and civil liability.
+ */
+
+#include <stdio.h>
+#include <netdb.h>
+#include <string.h>
+#include <stdlib.h>
+#include <getopt.h>
+#include <ctype.h>
+#include <xtables.h>
+#include <stddef.h>
+#include <linux/netfilter/xt_httphost.h>
+
+static void help(void)
+{
+	printf(
+"http host match options:\n"
+"[!] --host host              Match the host in an HTTP packet\n");
+}
+
+static const struct option opts[] = {
+	{ "host", 1, NULL, '1' },
+	{ .name = NULL }
+};
+
+static void init(struct xt_entry_match *m)
+{
+}
+
+#define HOST (0x1)
+
+static int parse(int c,
+                 char **argv,
+                 int invert,
+                 unsigned int *flags,
+                 const void *entry,
+                 struct xt_entry_match **match)
+{
+	struct xt_httphost_info *info = (struct xt_httphost_info *)(*match)->data;
+	char *host;
+	
+	switch (c) {
+	case '1':
+		if (*flags & HOST) {
+			xtables_error(PARAMETER_PROBLEM, "Can't specify multiple --host");
+		}
+		// xtables_check_inverse(optarg, &invert, &optind, 0, argv);
+		info->invert = invert;
+		
+		host = argv[optind-1];
+		
+		if (strlen(host) >= XT_HTTPHOST_MAX_HOST_SIZE) {
+			xtables_error(PARAMETER_PROBLEM, "STRING too long `%s'", host);
+		}
+		
+		strncpy(info->host, host, XT_HTTPHOST_MAX_HOST_SIZE);
+		info->host[XT_HTTPHOST_MAX_HOST_SIZE - 1] = 0;
+		
+		*flags |= HOST;
+		break;
+	default:
+		return 0;
+	}
+	
+	return 1;
+}
+
+static void check(unsigned int flags)
+{
+	if (!(flags & HOST)) {
+		xtables_error(PARAMETER_PROBLEM, "http host match: You must specify `--host'");
+	}
+}
+
+static void print(const void *ip,
+                  const struct xt_entry_match *match,
+                  int numeric)
+{
+	const struct xt_httphost_info *info = (const struct xt_httphost_info*) match->data;
+	printf(" http host match %s%s", info->invert ? "!" : "", info->host);
+}
+
+static void save(const void *ip,
+                 const struct xt_entry_match *match)
+{
+	const struct xt_httphost_info *info = (const struct xt_httphost_info*) match->data;
+	printf(" --host %s%s", info->invert ? "!" : "", info->host);
+}
+
+static struct xtables_match httphost_match = {
+	.family         = AF_INET,
+	.name           = "httphost",
+	.version        = XTABLES_VERSION,
+	.size           = XT_ALIGN(sizeof(struct xt_httphost_info)),
+	.userspacesize  = XT_ALIGN(sizeof(struct xt_httphost_info)),
+	.help           = help,
+	.init           = init,
+	.parse          = parse,
+	.final_check    = check,
+	.print          = print,
+	.save           = save,
+	.extra_opts     = opts,
+};
+
+static struct xtables_match httphost_match6 = {
+	.family         = AF_INET6,
+	.name           = "httphost",
+	.version        = XTABLES_VERSION,
+	.size           = XT_ALIGN(sizeof(struct xt_httphost_info)),
+	.userspacesize  = XT_ALIGN(sizeof(struct xt_httphost_info)),
+	.help           = help,
+	.init           = init,
+	.parse          = parse,
+	.final_check    = check,
+	.print          = print,
+	.save           = save,
+	.extra_opts     = opts,
+};
+
+void _init(void)
+{
+	xtables_register_match(&httphost_match);
+	xtables_register_match(&httphost_match6);
+}
diff --git a/extensions/libxt_httpurl.c b/extensions/libxt_httpurl.c
new file mode 100644
index 0000000..e9cfa26
--- /dev/null
+++ b/extensions/libxt_httpurl.c
@@ -0,0 +1,143 @@
+ /*
+ * Copyright (c) 2010 by Cisco Systems, Inc. All Rights Reserved.
+ *
+ * This work is subject to U.S. and international copyright laws and
+ * treaties. No part of this work may be used, practiced, performed,
+ * copied, distributed, revised, modified, translated, abridged, condensed,
+ * expanded, collected, compiled, linked, recast, transformed or adapted
+ * without the prior written consent of Cisco Systems, Inc. Any use or
+ * exploitation of this work without authorization could subject the
+ * perpetrator to criminal and civil liability.
+ */
+
+#include <stdio.h>
+#include <netdb.h>
+#include <string.h>
+#include <stdlib.h>
+#include <getopt.h>
+#include <ctype.h>
+#include <xtables.h>
+#include <stddef.h>
+#include <linux/netfilter/xt_httpurl.h>
+
+static void help(void)
+{
+	printf(
+"http url match options:\n"
+"--match-proxy               Match proxied HTTP requests\n"
+"--match-java                Match Java HTTP requests\n"
+"--match-activex             Match ActiveX HTTP requests\n");
+}
+
+static const struct option opts[] = {
+	{ "match-proxy", 0, NULL, '1' },
+	{ "match-java", 0, NULL, '2' },
+	{ "match-activex", 0, NULL, '3' },
+	{ .name = NULL }
+};
+
+static void init(struct xt_entry_match *m)
+{
+}
+
+static int parse(int c,
+                 char **argv,
+                 int invert,
+                 unsigned int *flags,
+                 const void *entry,
+                 struct xt_entry_match **match)
+{
+	struct xt_httpurl_info *info = (struct xt_httpurl_info *)(*match)->data;
+	
+	info->match_proxy = 0;
+	info->match_java = 0;
+	info->match_activex = 0;
+	
+	switch (c) {
+	case '1':
+		info->match_proxy = 1;
+		break;
+	case '2':
+		info->match_java = 1;
+		break;
+	case '3':
+		info->match_activex = 1;
+		break;
+	default:
+		return 0;
+	}
+	
+	return 1;
+}
+
+static void check(unsigned int flags)
+{
+}
+
+static void print(const void *ip,
+                  const struct xt_entry_match *match,
+                  int numeric)
+{
+	const struct xt_httpurl_info *info = (const struct xt_httpurl_info*) match->data;
+	printf(" http url match");
+	if (info->match_proxy) {
+		printf(" --match-proxy");
+	}
+	if (info->match_java) {
+		printf(" --match-java");
+	}
+	if (info->match_activex) {
+		printf(" --match-activex");
+	}
+}
+
+static void save(const void *ip,
+                 const struct xt_entry_match *match)
+{
+	const struct xt_httpurl_info *info = (const struct xt_httpurl_info*) match->data;
+	if (info->match_proxy) {
+		printf(" --match-proxy");
+	}
+	if (info->match_java) {
+		printf(" --match-java");
+	}
+	if (info->match_activex) {
+		printf(" --match-activex");
+	}
+}
+
+static struct xtables_match httpurl_match = {
+	.family         = AF_INET,
+	.name           = "httpurl",
+	.version        = XTABLES_VERSION,
+	.size           = XT_ALIGN(sizeof(struct xt_httpurl_info)),
+	.userspacesize  = XT_ALIGN(sizeof(struct xt_httpurl_info)),
+	.help           = help,
+	.init           = init,
+	.parse          = parse,
+	.final_check    = check,
+	.print          = print,
+	.save           = save,
+	.extra_opts     = opts,
+};
+
+static struct xtables_match httpurl_match6 = {
+	.family         = AF_INET6,
+	.name           = "httpurl",
+	.version        = XTABLES_VERSION,
+	.size           = XT_ALIGN(sizeof(struct xt_httpurl_info)),
+	.userspacesize  = XT_ALIGN(sizeof(struct xt_httpurl_info)),
+	.help           = help,
+	.init           = init,
+	.parse          = parse,
+	.final_check    = check,
+	.print          = print,
+	.save           = save,
+	.extra_opts     = opts,
+};
+
+void _init(void)
+{
+	xtables_register_match(&httpurl_match);
+	xtables_register_match(&httpurl_match6);
+}
-- 
2.6.4


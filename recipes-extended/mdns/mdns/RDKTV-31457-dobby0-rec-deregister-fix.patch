Date: July 23, 2024
From: rgangi643 <ramakrishna_gangisetty@comcast.com>
Source: COMCAST
Subject: Accept the unicast msg received on dobby0
nw interface and record dergistration delaying SPS registration
Signed-off-by: rgangi643 <ramakrishna_gangisetty@comcast.com>
Index: git/mDNSPosix/mDNSPosix.c
===================================================================
--- git.orig/mDNSPosix/mDNSPosix.c
+++ git/mDNSPosix/mDNSPosix.c
@@ -1,6 +1,6 @@
 /* -*- Mode: C; tab-width: 4; c-file-style: "bsd"; c-basic-offset: 4; fill-column: 108; indent-tabs-mode: nil; -*-
  *
- * Copyright (c) 2002-2021 Apple Inc. All rights reserved.
+ * Copyright (c) 2002-2024 Apple Inc. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -421,8 +421,34 @@ mDNSlocal void tcpConnectCallback(int fd
     }
 }
 
+// Searches the interface list looking for the named interface.
+// Returns a pointer to if it found, or NULL otherwise.
+mDNSlocal PosixNetworkInterface *SearchForInterfaceByName(mDNS *const m, const char *const intfName)
+{
+    PosixNetworkInterface *intf;
+
+    assert(m != NULL);
+    assert(intfName != NULL);
+
+    intf = (PosixNetworkInterface*)(m->HostInterfaces);
+    while ((intf != NULL) && (strcmp(intf->intfName, intfName) != 0))
+        intf = (PosixNetworkInterface *)(intf->coreIntf.next);
+
+    return intf;
+}
+
+mDNSlocal PosixNetworkInterface *SearchForInterfaceByIndex(mDNS *const m, const mDNSu32 index)
+{
+    PosixNetworkInterface *intf = (PosixNetworkInterface*)(m->HostInterfaces);
+    while (intf && (((mDNSu32)intf->index) != index))
+    {
+        intf = (PosixNetworkInterface *)(intf->coreIntf.next);
+    }
+    return intf;
+}
+
 // This routine is called when the main loop detects that data is available on a socket.
-mDNSlocal void SocketDataReady(mDNS *const m, PosixNetworkInterface *intf, int skt, UDPSocket *sock)
+mDNSlocal void SocketDataReady(mDNS *const m, const PosixNetworkInterface *intf, const int skt, UDPSocket *const sock)
 {
     mDNSAddr senderAddr, destAddr;
     mDNSIPPort senderPort, destPort;
@@ -434,7 +460,7 @@ mDNSlocal void SocketDataReady(mDNS *con
     int flags;
     mDNSu8 ttl;
     mDNSBool reject;
-    const mDNSInterfaceID InterfaceID = intf ? intf->coreIntf.InterfaceID : NULL;
+    
 
     assert(m    != NULL);
     assert(skt  >= 0);
@@ -442,7 +468,7 @@ mDNSlocal void SocketDataReady(mDNS *con
     fromLen = sizeof(from);
     flags   = 0;
     packetLen = recvfrom_flags(skt, &packet, sizeof(packet), &flags, (struct sockaddr *) &from, &fromLen, &packetInfo, &ttl);
-
+    LogMsg("unicast debug: SocketDataReady: Got packetLen %lld for socket %d", (long long)packetLen, skt);
     if (packetLen >= 0)
     {
         SockAddrTomDNSAddr((struct sockaddr*)&from, &senderAddr, &senderPort);
@@ -491,11 +517,31 @@ mDNSlocal void SocketDataReady(mDNS *con
             if      (packetInfo.ipi_ifname[0] != 0) reject = (strcmp(packetInfo.ipi_ifname, intf->intfName) != 0);
             else if (packetInfo.ipi_ifindex != -1) reject = (packetInfo.ipi_ifindex != intf->index);
 
+            if (reject && !mDNSAddrIsDNSMulticast(&destAddr))
+            {
+                const PosixNetworkInterface *realIntf = mDNSNULL;
+                if (packetInfo.ipi_ifname[0] != 0)
+                {
+                    realIntf = SearchForInterfaceByName(m, packetInfo.ipi_ifname);
+                }
+                else if (packetInfo.ipi_ifindex != -1)
+                {
+                    realIntf = SearchForInterfaceByIndex(m, packetInfo.ipi_ifindex);
+                }
+                if (realIntf)
+                {
+                    LogMsg("SocketDataReady correcting receive interface from %s/%u to %s/%u",
+                        intf->intfName, intf->index, realIntf->intfName, realIntf->index);
+                    intf = realIntf;
+                    reject = mDNSfalse;
+                }
+            }
+            
             if (reject)
             {
-                verbosedebugf("SocketDataReady ignored a packet from %#a to %#a on interface %s/%d expecting %#a/%s/%d/%d",
-                              &senderAddr, &destAddr, packetInfo.ipi_ifname, packetInfo.ipi_ifindex,
-                              &intf->coreIntf.ip, intf->intfName, intf->index, skt);
+                LogMsg("unicast debug: SocketDataReady ignored a packet from %#a (port %u) to %#a (port %u) on interface %s/%d expecting %#a/%s/%d/%d",
+                    &senderAddr, mDNSVal16(senderPort), &destAddr, mDNSVal16(destPort), packetInfo.ipi_ifname, packetInfo.ipi_ifindex,
+                    &intf->coreIntf.ip, intf->intfName, intf->index, skt);
                 packetLen = -1;
                 num_pkts_rejected++;
                 if (num_pkts_rejected > (num_pkts_accepted + 1) * (num_registered_interfaces + 1) * 2)
@@ -509,16 +555,18 @@ mDNSlocal void SocketDataReady(mDNS *con
             }
             else
             {
-                verbosedebugf("SocketDataReady got a packet from %#a to %#a on interface %#a/%s/%d/%d",
-                              &senderAddr, &destAddr, &intf->coreIntf.ip, intf->intfName, intf->index, skt);
+                LogMsg("unicast debug: SocketDataReady got a packet from %#a (port %u) to %#a (port %u) on interface %#a/%s/%d/%d",
+                    &senderAddr, mDNSVal16(senderPort), &destAddr, mDNSVal16(destPort), &intf->coreIntf.ip, intf->intfName, intf->index, skt);
                 num_pkts_accepted++;
             }
         }
     }
 
-    if (packetLen >= 0)
+    if (packetLen >= 0){
+        const mDNSInterfaceID InterfaceID = intf ? intf->coreIntf.InterfaceID : NULL;
         mDNSCoreReceive(m, &packet, (mDNSu8 *)&packet + packetLen,
                         &senderAddr, senderPort, &destAddr, sock == mDNSNULL ? MulticastDNSPort : sock->port, InterfaceID);
+    }
 }
 
 mDNSlocal void UDPReadCallback(int fd, void *context)
@@ -1021,22 +1069,6 @@ mDNSexport int ParseDNSServers(mDNS *m,
     return (numOfServers > 0) ? 0 : -1;
 }
 
-// Searches the interface list looking for the named interface.
-// Returns a pointer to if it found, or NULL otherwise.
-mDNSlocal PosixNetworkInterface *SearchForInterfaceByName(mDNS *const m, const char *intfName)
-{
-    PosixNetworkInterface *intf;
-
-    assert(m != NULL);
-    assert(intfName != NULL);
-
-    intf = (PosixNetworkInterface*)(m->HostInterfaces);
-    while ((intf != NULL) && (strcmp(intf->intfName, intfName) != 0))
-        intf = (PosixNetworkInterface *)(intf->coreIntf.next);
-
-    return intf;
-}
-
 mDNSexport mDNSInterfaceID mDNSPlatformInterfaceIDfromInterfaceIndex(mDNS *const m, mDNSu32 index)
 {
     PosixNetworkInterface *intf;
@@ -1047,10 +1079,7 @@ mDNSexport mDNSInterfaceID mDNSPlatformI
     if (index == kDNSServiceInterfaceIndexP2P      ) return(mDNSInterface_P2P);
     if (index == kDNSServiceInterfaceIndexAny      ) return(mDNSInterface_Any);
 
-    intf = (PosixNetworkInterface*)(m->HostInterfaces);
-    while ((intf != NULL) && (mDNSu32) intf->index != index)
-        intf = (PosixNetworkInterface *)(intf->coreIntf.next);
-
+    intf = (PosixNetworkInterface*)SearchForInterfaceByIndex(m, index);
     return (mDNSInterfaceID) intf;
 }
 
@@ -1879,8 +1908,8 @@ mDNSlocal mDNSBool mDNSPlatformInit_CanR
     s5353.sin_addr.s_addr = 0;
     err = bind(s, (struct sockaddr *)&s5353, sizeof(s5353));
     close(s);
-    if (err) debugf("No unicast UDP responses");
-    else debugf("Unicast UDP responses okay");
+    if (err) LogMsg("unicast debug: No unicast UDP responses");
+    else LogMsg("unicast debug: Unicast UDP responses okay");
     return(err == 0);
 }
 
@@ -2715,12 +2744,14 @@ mDNSexport void mDNSPosixProcessFDSet(mD
 
     if (m->p->unicastSocket4 != -1 && FD_ISSET(m->p->unicastSocket4, readfds))
     {
+        LogMsg("unicast debug: mDNSPosixProcessFDSet: checking unicastSocket4 (%d)", m->p->unicastSocket4);
         FD_CLR(m->p->unicastSocket4, readfds);
         SocketDataReady(m, NULL, m->p->unicastSocket4, NULL);
     }
 #if HAVE_IPV6
     if (m->p->unicastSocket6 != -1 && FD_ISSET(m->p->unicastSocket6, readfds))
     {
+        LogMsg("unicast debug: mDNSPosixProcessFDSet: checking unicastSocket6 (%d)", m->p->unicastSocket6);
         FD_CLR(m->p->unicastSocket6, readfds);
         SocketDataReady(m, NULL, m->p->unicastSocket6, NULL);
     }
@@ -2730,12 +2761,14 @@ mDNSexport void mDNSPosixProcessFDSet(mD
     {
         if (info->multicastSocket4 != -1 && FD_ISSET(info->multicastSocket4, readfds))
         {
+            LogMsg("unicast debug: mDNSPosixProcessFDSet: checking %s IPv4 socket (%d)", info->intfName, info->multicastSocket4);
             FD_CLR(info->multicastSocket4, readfds);
             SocketDataReady(m, info, info->multicastSocket4, NULL);
         }
 #if HAVE_IPV6
         if (info->multicastSocket6 != -1 && FD_ISSET(info->multicastSocket6, readfds))
         {
+            LogMsg("unicast debug: mDNSPosixProcessFDSet: checking %s IPv6 socket (%d)", info->intfName, info->multicastSocket6);
             FD_CLR(info->multicastSocket6, readfds);
             SocketDataReady(m, info, info->multicastSocket6, NULL);
         }
@@ -2945,7 +2978,9 @@ mStatus mDNSPosixRunEventLoopOnce(mDNS *
 
     // Include the sockets that are listening to the wire in our select() set
     mDNSPosixGetFDSetForSelect(m, &numFDs, &listenFDs, &writeFDs);
+    LogMsg("unicast debug: mDNSPosixRunEventLoopOnce: calling select()...");
     numReady = select(numFDs, &listenFDs, &writeFDs, (fd_set*) NULL, &timeout);
+    LogMsg("unicast debug: mDNSPosixRunEventLoopOnce: select() returned %d", numReady);
 
     if (numReady > 0)
     {
Index: git/mDNSCore/mDNS.c
===================================================================
--- git.orig/mDNSCore/mDNS.c
+++ git/mDNSCore/mDNS.c
@@ -7128,7 +7128,7 @@ mDNSexport mDNSBool mDNSCoreReadyForSlee
 
     // Scan list of registered records
     for (rr = m->ResourceRecords; rr; rr = rr->next)
-        if (!AuthRecord_uDNS(rr))
+        if (!AuthRecord_uDNS(rr) && rr->resrec.RecordType > kDNSRecordTypeDeregistering)
             if (!mDNSOpaque64IsZero(&rr->updateIntID))
             { LogSPS("mDNSCoreReadyForSleep: waiting for SPS updateIntID 0x%x 0x%x (updateid %d) %s", rr->updateIntID.l[1], rr->updateIntID.l[0], mDNSVal16(rr->updateid), ARDisplayString(m,rr)); goto spsnotready; }
 
